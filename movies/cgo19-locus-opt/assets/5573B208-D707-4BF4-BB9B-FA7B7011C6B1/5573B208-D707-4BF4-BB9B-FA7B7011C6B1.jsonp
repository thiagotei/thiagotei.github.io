local_slide( {"name":"5573B208-D707-4BF4-BB9B-FA7B7011C6B1","json":{"assets":{"73D4AB454566C54BE44EF1C16C1A7531":{"type":"texture","index":0,"assetRequest":{"type":"slide","state":"contents","slide":"none"},"url":{"native":"assets\/5573B208-D707-4BF4-BB9B-FA7B7011C6B1.pdf"},"width":720,"height":540},"9C8AC615EA5677661747574357E5BEBC":{"type":"texture","index":1,"assetRequest":{"type":"slide","state":"contents","slide":"none"},"url":{"native":"assets\/5573B208-D707-4BF4-BB9B-FA7B7011C6B1.pdf"},"width":720,"height":540}},"events":[{"effects":[{"beginTime":0,"baseLayer":{"animations":[],"initialState":{"affineTransform":[1,0,0,1,0,0],"masksToBounds":false,"rotation":0,"scale":1,"position":{"pointX":360,"pointY":270},"width":720,"sublayerTransform":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],"contentsRect":{"y":0,"x":0,"width":1,"height":1},"opacity":1,"edgeAntialiasingMask":251658240,"height":540,"hidden":false,"anchorPoint":{"pointX":0.5,"pointY":0.5}},"objectID":"0","layers":[{"animations":[],"initialState":{"affineTransform":[1,0,0,1,0,0],"masksToBounds":false,"rotation":0,"scale":1,"position":{"pointX":360,"pointY":270},"width":720,"sublayerTransform":[1,0,0,0,0,1,0,0,0,0,1,-0.00070015824933551967,0,0,0,1],"contentsRect":{"y":0,"x":0,"width":1,"height":1},"opacity":1,"edgeAntialiasingMask":251658240,"height":540,"hidden":false,"anchorPoint":{"pointX":0.5,"pointY":0.5}},"layers":[{"animations":[],"layers":[],"texturedRectangle":{"isBackgroundTexture":false,"singleTextureOpacity":1,"textureType":0,"textBaseline":0,"textXHeight":0,"isVerticalText":false},"initialState":{"affineTransform":[1,0,0,1,0,0],"masksToBounds":false,"rotation":0,"scale":1,"position":{"pointX":360,"pointY":270},"width":720,"sublayerTransform":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],"contentsRect":{"y":0,"x":0,"width":1,"height":1},"opacity":1,"edgeAntialiasingMask":0,"height":540,"hidden":false,"anchorPoint":{"pointX":0.5,"pointY":0.5}},"texture":"9C8AC615EA5677661747574357E5BEBC"},{"animations":[{"timeOffset":0,"from":{"scalar":false},"beginTime":0,"repeatCount":0,"fillMode":"both","property":"hidden","autoreverses":false,"duration":0.01,"to":{"scalar":true}}],"layers":[],"texturedRectangle":{"isBackgroundTexture":false,"singleTextureOpacity":1,"textureType":0,"textBaseline":0,"textXHeight":0,"isVerticalText":false},"initialState":{"affineTransform":[1,0,0,1,0,0],"masksToBounds":false,"rotation":0,"scale":1,"position":{"pointX":360,"pointY":270},"width":720,"sublayerTransform":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],"contentsRect":{"y":0,"x":0,"width":1,"height":1},"opacity":1,"edgeAntialiasingMask":0,"height":540,"hidden":false,"anchorPoint":{"pointX":0.5,"pointY":0.5}},"texture":"73D4AB454566C54BE44EF1C16C1A7531"}]}]},"effects":[],"duration":0.01,"type":"transition","name":"none","objectID":"0"}],"automaticPlay":false,"hyperlinks":[],"accessibility":[{"text":"#include <iostream>","targetRectangle":{"y":66.891828060150146,"x":539.24923086166382,"width":11.40185546875,"height":1}},{"text":"#include <sstream>","targetRectangle":{"y":67.891828060150146,"x":539.24923086166382,"width":10.8017578125,"height":1}},{"text":"#include <fstream>","targetRectangle":{"y":68.891828060150146,"x":539.24923086166382,"width":10.8017578125,"height":1}},{"text":"#include <vector>","targetRectangle":{"y":69.891828060150146,"x":539.24923086166382,"width":10.20166015625,"height":1}},{"text":"#include <map>","targetRectangle":{"y":70.891828060150146,"x":539.24923086166382,"width":8.4013671875,"height":1}},{"text":"#include <algorithm>","targetRectangle":{"y":71.891828060150146,"x":539.24923086166382,"width":12.001953125,"height":1}},{"text":"#include <functional>","targetRectangle":{"y":72.891828060150146,"x":539.24923086166382,"width":12.60205078125,"height":1}},{"text":"#include <numeric>","targetRectangle":{"y":73.891828060150146,"x":539.24923086166382,"width":10.8017578125,"height":1}},{"text":"#include <cstdio>","targetRectangle":{"y":74.891828060150146,"x":539.24923086166382,"width":10.20166015625,"height":1}},{"text":"#include <string>","targetRectangle":{"y":75.891828060150146,"x":539.24923086166382,"width":10.20166015625,"height":1}},{"text":"#include \\\"rose.h\\\"","targetRectangle":{"y":77.891828060150146,"x":539.24923086166382,"width":10.20166015625,"height":1}},{"text":"#include <AstInterface_ROSE.h>","targetRectangle":{"y":79.891828060150146,"x":539.24923086166382,"width":18.0029296875,"height":1}},{"text":"#include <LoopTransformInterface.h>","targetRectangle":{"y":80.891828060150146,"x":539.24923086166382,"width":21.00341796875,"height":1}},{"text":"#include <transformation.hh>","targetRectangle":{"y":82.891828060150146,"x":539.24923086166382,"width":16.802734375,"height":1}},{"text":"#include <utils.hh>","targetRectangle":{"y":83.891828060150146,"x":539.24923086166382,"width":11.40185546875,"height":1}},{"text":"#include <analysis.hh>","targetRectangle":{"y":84.891828060150146,"x":539.24923086166382,"width":13.2021484375,"height":1}},{"text":"#include <database.hh>","targetRectangle":{"y":85.891828060150146,"x":539.24923086166382,"width":13.2021484375,"height":1}},{"text":"using namespace std;","targetRectangle":{"y":88.891828060150146,"x":539.24923086166382,"width":12.001953125,"height":1}},{"text":"using namespace restructurer;","targetRectangle":{"y":89.891828060150146,"x":539.24923086166382,"width":17.40283203125,"height":1}},{"text":"void restructurer::unrollInnerLoops(const Database::trans_vec_t &trans_vec, SgStatement *base, const string &ref_out, bool if_distribute) {","targetRectangle":{"y":91.891828060150146,"x":539.24923086166382,"width":83.41357421875,"height":1}},{"text":"    SgProject *project = SageInterface::getProject();","targetRectangle":{"y":93.891828060150146,"x":539.24923086166382,"width":31.80517578125,"height":1}},{"text":"    Database *db = Database::getInstance();","targetRectangle":{"y":94.891828060150146,"x":539.24923086166382,"width":25.80419921875,"height":1}},{"text":"    SgStatement *old_copy = NULL;","targetRectangle":{"y":96.891828060150146,"x":539.24923086166382,"width":19.80322265625,"height":1}},{"text":"    SgStatement *new_copy = base;","targetRectangle":{"y":97.891828060150146,"x":539.24923086166382,"width":19.80322265625,"height":1}},{"text":"    for (int factor = 2; factor <= 8; factor *= 2) {","targetRectangle":{"y":99.891828060150146,"x":539.24923086166382,"width":31.205078125,"height":1}},{"text":"        \/\/printBanner(\\\"Find Innermost Loops\\\");","targetRectangle":{"y":101.89182806015015,"x":539.24923086166382,"width":27.6044921875,"height":1}},{"text":"        old_copy = new_copy;","targetRectangle":{"y":103.89182806015015,"x":539.24923086166382,"width":16.802734375,"height":1}},{"text":"        new_copy = SageInterface::copyStatement(base);","targetRectangle":{"y":104.89182806015015,"x":539.24923086166382,"width":32.4052734375,"height":1}},{"text":"        SageInterface::replaceStatement(old_copy, new_copy);","targetRectangle":{"y":106.89182806015015,"x":539.24923086166382,"width":36.005859375,"height":1}},{"text":"        if (old_copy != base) {","targetRectangle":{"y":107.89182806015015,"x":539.24923086166382,"width":18.60302734375,"height":1}},{"text":"            SageInterface::deepDelete(old_copy);","targetRectangle":{"y":108.89182806015015,"x":539.24923086166382,"width":28.8046875,"height":1}},{"text":"        }","targetRectangle":{"y":109.89182806015015,"x":539.24923086166382,"width":5.40087890625,"height":1}},{"text":"        InnerLoopIdentifier finder;","targetRectangle":{"y":111.89182806015015,"x":539.24923086166382,"width":21.00341796875,"height":1}},{"text":"        finder.traverseInputFiles(project);","targetRectangle":{"y":112.89182806015015,"x":539.24923086166382,"width":25.80419921875,"height":1}},{"text":"        \/\/printBanner(\\\"Loop Unrolling\\\");","targetRectangle":{"y":114.89182806015015,"x":539.24923086166382,"width":24.00390625,"height":1}},{"text":"        const loop_vec_t &inner_loop_vec = finder.getInnerLoopVec();","targetRectangle":{"y":116.89182806015015,"x":539.24923086166382,"width":40.806640625,"height":1}},{"text":"        bool if_changed = false;","targetRectangle":{"y":118.89182806015015,"x":539.24923086166382,"width":19.203125,"height":1}},{"text":"        for (loop_vec_t::const_iterator citr = inner_loop_vec.begin(); citr != inner_loop_vec.end(); ++citr) {","targetRectangle":{"y":119.89182806015015,"x":539.24923086166382,"width":66.0107421875,"height":1}},{"text":"            SgForStatement *loop = *citr;","targetRectangle":{"y":121.89182806015015,"x":539.24923086166382,"width":24.60400390625,"height":1}},{"text":"            if (!SageInterface::isAncestor(new_copy, loop)) {","targetRectangle":{"y":123.89182806015015,"x":539.24923086166382,"width":36.60595703125,"height":1}},{"text":"                continue;","targetRectangle":{"y":124.89182806015015,"x":539.24923086166382,"width":15.00244140625,"height":1}},{"text":"            }","targetRectangle":{"y":125.89182806015015,"x":539.24923086166382,"width":7.80126953125,"height":1}},{"text":"            SgVariableSymbol *for_ierator;","targetRectangle":{"y":127.89182806015015,"x":539.24923086166382,"width":25.2041015625,"height":1}},{"text":"            SgExpression * lower_bound;","targetRectangle":{"y":128.89182806015015,"x":539.24923086166382,"width":23.40380859375,"height":1}},{"text":"            SgExpression * upper_bound;","targetRectangle":{"y":129.89182806015015,"x":539.24923086166382,"width":23.40380859375,"height":1}},{"text":"            SgExpression * stride;","targetRectangle":{"y":130.89182806015015,"x":539.24923086166382,"width":20.4033203125,"height":1}},{"text":"            bool success = SageInterface::getForLoopInformations(loop, for_ierator, lower_bound, upper_bound, stride);","targetRectangle":{"y":131.89182806015015,"x":539.24923086166382,"width":70.8115234375,"height":1}},{"text":"            if (success) {","targetRectangle":{"y":132.89182806015015,"x":539.24923086166382,"width":15.6025390625,"height":1}},{"text":"                SgType *type = for_ierator->get_type();","targetRectangle":{"y":133.89182806015015,"x":539.24923086166382,"width":33.00537109375,"height":1}},{"text":"                if (type->stripType()->isUnsignedType()) {","targetRectangle":{"y":134.89182806015015,"x":539.24923086166382,"width":34.8056640625,"height":1}},{"text":"                    \/\/ Not doing unrolling on unsigned iterator","targetRectangle":{"y":135.89182806015015,"x":539.24923086166382,"width":37.80615234375,"height":1}},{"text":"                    cout << \\\"Skip unrolling a loop with unsigned iterator\\\" << endl;","targetRectangle":{"y":136.89182806015015,"x":539.24923086166382,"width":49.80810546875,"height":1}},{"text":"                    continue;","targetRectangle":{"y":137.89182806015015,"x":539.24923086166382,"width":17.40283203125,"height":1}},{"text":"                }","targetRectangle":{"y":138.89182806015015,"x":539.24923086166382,"width":10.20166015625,"height":1}},{"text":"            }","targetRectangle":{"y":139.89182806015015,"x":539.24923086166382,"width":7.80126953125,"height":1}},{"text":"            int trip = getForLoopTripCount(loop);","targetRectangle":{"y":141.89182806015015,"x":539.24923086166382,"width":29.40478515625,"height":1}},{"text":"            if (factor > 2 && trip < factor && trip != -1) {","targetRectangle":{"y":142.89182806015015,"x":539.24923086166382,"width":36.005859375,"height":1}},{"text":"                cout << \\\"Skip unrolling a loop with trip count \\\" << trip << \\\" lower than unroll factor \\\" << factor << endl;","targetRectangle":{"y":143.89182806015015,"x":539.24923086166382,"width":73.81201171875,"height":1}},{"text":"                continue;","targetRectangle":{"y":144.89182806015015,"x":539.24923086166382,"width":15.00244140625,"height":1}},{"text":"            }","targetRectangle":{"y":145.89182806015015,"x":539.24923086166382,"width":7.80126953125,"height":1}},{"text":"            SgForStatement *new_loop = isSgForStatement(SageInterface::copyStatement(loop));","targetRectangle":{"y":147.89182806015015,"x":539.24923086166382,"width":55.208984375,"height":1}},{"text":"            SageInterface::replaceStatement(loop, new_loop);","targetRectangle":{"y":149.89182806015015,"x":539.24923086166382,"width":36.005859375,"height":1}},{"text":"            SageInterface::deepDelete(loop);","targetRectangle":{"y":150.89182806015015,"x":539.24923086166382,"width":26.404296875,"height":1}},{"text":"            ","targetRectangle":{"y":151.89182806015015,"x":539.24923086166382,"width":7.201171875,"height":1}},{"text":"            if (SageInterface::loopUnrolling(new_loop, factor)) {","targetRectangle":{"y":152.89182806015015,"x":539.24923086166382,"width":39.00634765625,"height":1}},{"text":"                cout << \\\"Unrolled an inner most loop with factor \\\" << factor << endl;","targetRectangle":{"y":153.89182806015015,"x":539.24923086166382,"width":51.00830078125,"height":1}},{"text":"                if_changed = true;","targetRectangle":{"y":154.89182806015015,"x":539.24923086166382,"width":20.4033203125,"height":1}},{"text":"            } else {","targetRectangle":{"y":155.89182806015015,"x":539.24923086166382,"width":12.001953125,"height":1}},{"text":"                cout << \\\"Failed to unroll an inner most loop\\\" << endl;","targetRectangle":{"y":156.89182806015015,"x":539.24923086166382,"width":42.0068359375,"height":1}},{"text":"            }","targetRectangle":{"y":157.89182806015015,"x":539.24923086166382,"width":7.80126953125,"height":1}},{"text":"        }","targetRectangle":{"y":159.89182806015015,"x":539.24923086166382,"width":5.40087890625,"height":1}},{"text":"        if (if_changed) {","targetRectangle":{"y":161.89182806015015,"x":539.24923086166382,"width":15.00244140625,"height":1}},{"text":"            generate_output(ref_out, db->getMutationNumber());","targetRectangle":{"y":162.89182806015015,"x":539.24923086166382,"width":37.2060546875,"height":1}},{"text":"            stringstream ss;","targetRectangle":{"y":164.89182806015015,"x":539.24923086166382,"width":16.802734375,"height":1}},{"text":"            ss << \\\"factor=\\\" << factor;","targetRectangle":{"y":165.89182806015015,"x":539.24923086166382,"width":22.8037109375,"height":1}},{"text":"            Database::trans_vec_t tmp_vec = trans_vec;","targetRectangle":{"y":167.89182806015015,"x":539.24923086166382,"width":32.4052734375,"height":1}},{"text":"            Database::Transformation trans(\\\"unrolling\\\", ss.str());","targetRectangle":{"y":168.89182806015015,"x":539.24923086166382,"width":39.6064453125,"height":1}},{"text":"            tmp_vec.push_back(trans);","targetRectangle":{"y":170.89182806015015,"x":539.24923086166382,"width":22.20361328125,"height":1}},{"text":"            db->addMutation(tmp_vec);","targetRectangle":{"y":172.89182806015015,"x":539.24923086166382,"width":22.20361328125,"height":1}},{"text":"            if (if_distribute) {","targetRectangle":{"y":174.89182806015015,"x":539.24923086166382,"width":19.203125,"height":1}},{"text":"                \/\/distributeInnerLoops(new_copy, ref_out, false);","targetRectangle":{"y":175.89182806015015,"x":539.24923086166382,"width":39.00634765625,"height":1}},{"text":"            }","targetRectangle":{"y":176.89182806015015,"x":539.24923086166382,"width":7.80126953125,"height":1}},{"text":"        }","targetRectangle":{"y":177.89182806015015,"x":539.24923086166382,"width":5.40087890625,"height":1}},{"text":"    }","targetRectangle":{"y":179.89182806015015,"x":539.24923086166382,"width":3.00048828125,"height":1}},{"text":"    if (new_copy != base) {","targetRectangle":{"y":181.89182806015015,"x":539.24923086166382,"width":16.20263671875,"height":1}},{"text":"        SageInterface::replaceStatement(new_copy, base);","targetRectangle":{"y":182.89182806015015,"x":539.24923086166382,"width":33.60546875,"height":1}},{"text":"        SageInterface::deepDelete(new_copy);","targetRectangle":{"y":183.89182806015015,"x":539.24923086166382,"width":26.404296875,"height":1}},{"text":"    }","targetRectangle":{"y":184.89182806015015,"x":539.24923086166382,"width":3.00048828125,"height":1}},{"text":"}","targetRectangle":{"y":185.89182806015015,"x":539.24923086166382,"width":0.60009765625,"height":1}},{"text":"void restructurer::unrollAndJam(const Database::trans_vec_t &trans_vec, SgBasicBlock *base, int nest_level, const std::string &ref_out,","targetRectangle":{"y":187.89182806015015,"x":539.24923086166382,"width":81.01318359375,"height":1}},{"text":"    const DependenceGraph &orig_dep_graph) {","targetRectangle":{"y":188.89182806015015,"x":539.24923086166382,"width":26.404296875,"height":1}},{"text":"    SgProject *project = SageInterface::getProject();","targetRectangle":{"y":190.89182806015015,"x":539.24923086166382,"width":31.80517578125,"height":1}},{"text":"    Database *db = Database::getInstance();","targetRectangle":{"y":191.89182806015015,"x":539.24923086166382,"width":25.80419921875,"height":1}},{"text":"    for (int i = 0; i < nest_level - 1; ++i) {","targetRectangle":{"y":193.89182806015015,"x":539.24923086166382,"width":27.6044921875,"height":1}},{"text":"        for (int factor = 2; factor <= 4; factor *= 2) {","targetRectangle":{"y":194.89182806015015,"x":539.24923086166382,"width":33.60546875,"height":1}},{"text":"            if (orig_dep_graph.isUnrollAndJamLegal(i, factor)) {","targetRectangle":{"y":195.89182806015015,"x":539.24923086166382,"width":38.40625,"height":1}},{"text":"                SgBasicBlock *new_copy = isSgBasicBlock(SageInterface::copyStatement(base));","targetRectangle":{"y":197.89182806015015,"x":539.24923086166382,"width":55.208984375,"height":1}},{"text":"                SageInterface::replaceStatement(base, new_copy);","targetRectangle":{"y":198.89182806015015,"x":539.24923086166382,"width":38.40625,"height":1}},{"text":"                SgStatementPtrList stmts = new_copy->get_statements();","targetRectangle":{"y":200.89182806015015,"x":539.24923086166382,"width":42.0068359375,"height":1}},{"text":"                SgForStatement *loop = NULL;","targetRectangle":{"y":201.89182806015015,"x":539.24923086166382,"width":26.404296875,"height":1}},{"text":"                for (SgStatementPtrList::iterator itr = stmts.begin(); itr != stmts.end(); ++itr) {","targetRectangle":{"y":202.89182806015015,"x":539.24923086166382,"width":59.40966796875,"height":1}},{"text":"                    if (isSgForStatement(*itr)) {","targetRectangle":{"y":203.89182806015015,"x":539.24923086166382,"width":29.40478515625,"height":1}},{"text":"                        loop = isSgForStatement(*itr);","targetRectangle":{"y":204.89182806015015,"x":539.24923086166382,"width":32.4052734375,"height":1}},{"text":"                        break;","targetRectangle":{"y":205.89182806015015,"x":539.24923086166382,"width":18.0029296875,"height":1}},{"text":"                    }","targetRectangle":{"y":206.89182806015015,"x":539.24923086166382,"width":12.60205078125,"height":1}},{"text":"                }","targetRectangle":{"y":207.89182806015015,"x":539.24923086166382,"width":10.20166015625,"height":1}},{"text":"                ROSE_ASSERT(loop != NULL);","targetRectangle":{"y":208.89182806015015,"x":539.24923086166382,"width":25.2041015625,"height":1}},{"text":"                ","targetRectangle":{"y":209.89182806015015,"x":539.24923086166382,"width":9.6015625,"height":1}},{"text":"                SgForStatement *target_loop = loop;","targetRectangle":{"y":210.89182806015015,"x":539.24923086166382,"width":30.60498046875,"height":1}},{"text":"                SgBasicBlock *enclosing_body = new_copy;","targetRectangle":{"y":211.89182806015015,"x":539.24923086166382,"width":33.60546875,"height":1}},{"text":"                for (int j = 0; j < i; ++j) {","targetRectangle":{"y":212.89182806015015,"x":539.24923086166382,"width":27.00439453125,"height":1}},{"text":"                    enclosing_body = isSgBasicBlock(target_loop->get_loop_body());","targetRectangle":{"y":213.89182806015015,"x":539.24923086166382,"width":49.2080078125,"height":1}},{"text":"                    ROSE_ASSERT(enclosing_body != NULL);","targetRectangle":{"y":214.89182806015015,"x":539.24923086166382,"width":33.60546875,"height":1}},{"text":"                    SgStatementPtrList stmts = enclosing_body->get_statements();","targetRectangle":{"y":216.89182806015015,"x":539.24923086166382,"width":48.0078125,"height":1}},{"text":"                    for (SgStatementPtrList::iterator itr = stmts.begin(); itr != stmts.end(); ++itr) {","targetRectangle":{"y":217.89182806015015,"x":539.24923086166382,"width":61.81005859375,"height":1}},{"text":"                        if (isSgForStatement(*itr)) {","targetRectangle":{"y":218.89182806015015,"x":539.24923086166382,"width":31.80517578125,"height":1}},{"text":"                            target_loop = isSgForStatement(*itr);","targetRectangle":{"y":219.89182806015015,"x":539.24923086166382,"width":39.00634765625,"height":1}},{"text":"                            break;","targetRectangle":{"y":220.89182806015015,"x":539.24923086166382,"width":20.4033203125,"height":1}},{"text":"                        }","targetRectangle":{"y":221.89182806015015,"x":539.24923086166382,"width":15.00244140625,"height":1}},{"text":"                    }","targetRectangle":{"y":222.89182806015015,"x":539.24923086166382,"width":12.60205078125,"height":1}},{"text":"                }","targetRectangle":{"y":224.89182806015015,"x":539.24923086166382,"width":10.20166015625,"height":1}},{"text":"                size_t enclosing_size = enclosing_body->get_numberOfTraversalSuccessors();","targetRectangle":{"y":226.89182806015015,"x":539.24923086166382,"width":54.0087890625,"height":1}},{"text":"                SgBasicBlock *target_body = isSgBasicBlock(target_loop->get_loop_body());","targetRectangle":{"y":228.89182806015015,"x":539.24923086166382,"width":53.40869140625,"height":1}},{"text":"                ROSE_ASSERT(target_body != NULL);","targetRectangle":{"y":229.89182806015015,"x":539.24923086166382,"width":29.40478515625,"height":1}},{"text":"                if (target_body->get_numberOfTraversalSuccessors() == 1) {","targetRectangle":{"y":231.89182806015015,"x":539.24923086166382,"width":44.4072265625,"height":1}},{"text":"                    int trip = getForLoopTripCount(target_loop);","targetRectangle":{"y":233.89182806015015,"x":539.24923086166382,"width":38.40625,"height":1}},{"text":"                    if (factor == 2 || trip >= factor || trip == -1) {","targetRectangle":{"y":234.89182806015015,"x":539.24923086166382,"width":42.0068359375,"height":1}},{"text":"                        if (SageInterface::loopUnrolling(target_loop, factor)) {","targetRectangle":{"y":235.89182806015015,"x":539.24923086166382,"width":48.0078125,"height":1}},{"text":"                            SgStatementPtrList stmts = target_body->get_statements();","targetRectangle":{"y":237.89182806015015,"x":539.24923086166382,"width":51.00830078125,"height":1}},{"text":"                            SgForStatement *inner_loop = isSgForStatement(stmts[0]);","targetRectangle":{"y":238.89182806015015,"x":539.24923086166382,"width":50.408203125,"height":1}},{"text":"                            ROSE_ASSERT(inner_loop != NULL);","targetRectangle":{"y":239.89182806015015,"x":539.24923086166382,"width":36.005859375,"height":1}},{"text":"                            SgBasicBlock *inner_scope = isSgBasicBlock(inner_loop->get_loop_body());","targetRectangle":{"y":241.89182806015015,"x":539.24923086166382,"width":60.009765625,"height":1}},{"text":"                            ROSE_ASSERT(inner_scope != NULL);","targetRectangle":{"y":242.89182806015015,"x":539.24923086166382,"width":36.60595703125,"height":1}},{"text":"                            for (int j = 1; j < factor; ++j) {","targetRectangle":{"y":244.89182806015015,"x":539.24923086166382,"width":37.2060546875,"height":1}},{"text":"                                SgBasicBlock *scope = isSgBasicBlock(stmts[j]);","targetRectangle":{"y":245.89182806015015,"x":539.24923086166382,"width":47.40771484375,"height":1}},{"text":"                                ROSE_ASSERT(scope != NULL);","targetRectangle":{"y":246.89182806015015,"x":539.24923086166382,"width":35.40576171875,"height":1}},{"text":"                                SgForStatement *dup_loop = isSgForStatement(scope->get_traversalSuccessorByIndex(0));","targetRectangle":{"y":248.89182806015015,"x":539.24923086166382,"width":70.21142578125,"height":1}},{"text":"                                ROSE_ASSERT(dup_loop != NULL);","targetRectangle":{"y":249.89182806015015,"x":539.24923086166382,"width":37.2060546875,"height":1}},{"text":"                                SgBasicBlock *dup_scope = isSgBasicBlock(dup_loop->get_loop_body());","targetRectangle":{"y":251.89182806015015,"x":539.24923086166382,"width":60.009765625,"height":1}},{"text":"                                ROSE_ASSERT(dup_scope != NULL);","targetRectangle":{"y":252.89182806015015,"x":539.24923086166382,"width":37.80615234375,"height":1}},{"text":"                                SgStatementPtrList dup_stmts = dup_scope->get_statements();","targetRectangle":{"y":254.89182806015015,"x":539.24923086166382,"width":54.60888671875,"height":1}},{"text":"                                for (SgStatementPtrList::iterator itr2 = dup_stmts.begin(); itr2 != dup_stmts.end(); ++itr2) {","targetRectangle":{"y":255.89182806015015,"x":539.24923086166382,"width":75.6123046875,"height":1}},{"text":"                                    SgStatement *new_stmt = SageInterface::copyStatement(*itr2);","targetRectangle":{"y":256.89182806015015,"x":539.24923086166382,"width":57.609375,"height":1}},{"text":"                                    SageInterface::appendStatement(new_stmt, inner_scope);","targetRectangle":{"y":257.89182806015015,"x":539.24923086166382,"width":54.0087890625,"height":1}},{"text":"                                }","targetRectangle":{"y":258.89182806015015,"x":539.24923086166382,"width":19.80322265625,"height":1}},{"text":"                                SageInterface::removeStatement(scope);","targetRectangle":{"y":260.89182806015015,"x":539.24923086166382,"width":42.0068359375,"height":1}},{"text":"                                SageInterface::deepDelete(scope);","targetRectangle":{"y":261.89182806015015,"x":539.24923086166382,"width":39.00634765625,"height":1}},{"text":"                            }","targetRectangle":{"y":262.89182806015015,"x":539.24923086166382,"width":17.40283203125,"height":1}},{"text":"                            if (enclosing_body->get_numberOfTraversalSuccessors() == enclosing_size + 2) { \/\/ we have a residue loop","targetRectangle":{"y":264.89182806015015,"x":539.24923086166382,"width":79.212890625,"height":1}},{"text":"                                SgForStatement *residue_loop = isSgForStatement(enclosing_body->get_traversalSuccessorByIndex(enclosing_body->get_childIndex(target_loop) + 1));","targetRectangle":{"y":265.89182806015015,"x":539.24923086166382,"width":105.6171875,"height":1}},{"text":"                                ROSE_ASSERT(residue_loop != NULL);","targetRectangle":{"y":266.89182806015015,"x":539.24923086166382,"width":39.6064453125,"height":1}},{"text":"                                residue_loop->set_for_init_stmt(SageBuilder::buildForInitStatement(SageBuilder::buildNullStatement()));","targetRectangle":{"y":268.89182806015015,"x":539.24923086166382,"width":81.01318359375,"height":1}},{"text":"                                \/\/ need to fix this because ROSE's unrolling has a bug","targetRectangle":{"y":269.89182806015015,"x":539.24923086166382,"width":51.6083984375,"height":1}},{"text":"                            }","targetRectangle":{"y":270.89182806015015,"x":539.24923086166382,"width":17.40283203125,"height":1}},{"text":"                            cout << \\\"Unroll-jammed at level \\\" << i << \\\" with factor \\\" << factor << endl;","targetRectangle":{"y":272.89182806015015,"x":539.24923086166382,"width":62.41015625,"height":1}},{"text":"                            generate_output(ref_out, db->getMutationNumber());","targetRectangle":{"y":274.89182806015015,"x":539.24923086166382,"width":46.8076171875,"height":1}},{"text":"                            stringstream ss;","targetRectangle":{"y":276.89182806015015,"x":539.24923086166382,"width":26.404296875,"height":1}},{"text":"                            ss << \\\"level=\\\" << i << \\\",factor=\\\" << factor;","targetRectangle":{"y":277.89182806015015,"x":539.24923086166382,"width":43.20703125,"height":1}},{"text":"                            Database::trans_vec_t tmp_vec = trans_vec;","targetRectangle":{"y":279.89182806015015,"x":539.24923086166382,"width":42.0068359375,"height":1}},{"text":"                            Database::Transformation trans(\\\"unrolljam\\\", ss.str());","targetRectangle":{"y":280.89182806015015,"x":539.24923086166382,"width":49.2080078125,"height":1}},{"text":"                            tmp_vec.push_back(trans);","targetRectangle":{"y":282.89182806015015,"x":539.24923086166382,"width":31.80517578125,"height":1}},{"text":"                            db->addMutation(tmp_vec);","targetRectangle":{"y":284.89182806015015,"x":539.24923086166382,"width":31.80517578125,"height":1}},{"text":"                            unrollInnerLoops(tmp_vec, new_copy, ref_out);","targetRectangle":{"y":286.89182806015015,"x":539.24923086166382,"width":43.80712890625,"height":1}},{"text":"                        } else {","targetRectangle":{"y":288.89182806015015,"x":539.24923086166382,"width":19.203125,"height":1}},{"text":"                            cout << \\\"Failed to unroll-jam at level \\\" << i << \\\" with factor \\\" << factor << endl;","targetRectangle":{"y":289.89182806015015,"x":539.24923086166382,"width":66.61083984375,"height":1}},{"text":"                        }","targetRectangle":{"y":290.89182806015015,"x":539.24923086166382,"width":15.00244140625,"height":1}},{"text":"                    } else {","targetRectangle":{"y":291.89182806015015,"x":539.24923086166382,"width":16.802734375,"height":1}},{"text":"                        cout << \\\"Failed to unroll-jam at level \\\" << i << \\\" with factor \\\" << factor << endl;","targetRectangle":{"y":292.89182806015015,"x":539.24923086166382,"width":64.21044921875,"height":1}},{"text":"                    }","targetRectangle":{"y":293.89182806015015,"x":539.24923086166382,"width":12.60205078125,"height":1}},{"text":"                } else {","targetRectangle":{"y":294.89182806015015,"x":539.24923086166382,"width":14.40234375,"height":1}},{"text":"                    cout << \\\"Failed to unroll-jam at level \\\" << i << \\\" with factor \\\" << factor << endl;","targetRectangle":{"y":295.89182806015015,"x":539.24923086166382,"width":61.81005859375,"height":1}},{"text":"                }","targetRectangle":{"y":296.89182806015015,"x":539.24923086166382,"width":10.20166015625,"height":1}},{"text":"                SageInterface::replaceStatement(new_copy, base);","targetRectangle":{"y":298.89182806015015,"x":539.24923086166382,"width":38.40625,"height":1}},{"text":"                SageInterface::deepDelete(new_copy);","targetRectangle":{"y":299.89182806015015,"x":539.24923086166382,"width":31.205078125,"height":1}},{"text":"            } else {","targetRectangle":{"y":302.89182806015015,"x":539.24923086166382,"width":12.001953125,"height":1}},{"text":"                cout << \\\"Unroll-jam at level \\\" << i << \\\" with factor \\\" << factor << \\\" is illegal\\\" << endl;","targetRectangle":{"y":303.89182806015015,"x":539.24923086166382,"width":63.6103515625,"height":1}},{"text":"                break;","targetRectangle":{"y":304.89182806015015,"x":539.24923086166382,"width":13.2021484375,"height":1}},{"text":"            }","targetRectangle":{"y":305.89182806015015,"x":539.24923086166382,"width":7.80126953125,"height":1}},{"text":"        }","targetRectangle":{"y":306.89182806015015,"x":539.24923086166382,"width":5.40087890625,"height":1}},{"text":"    }","targetRectangle":{"y":307.89182806015015,"x":539.24923086166382,"width":3.00048828125,"height":1}},{"text":"}","targetRectangle":{"y":308.89182806015015,"x":539.24923086166382,"width":0.60009765625,"height":1}},{"text":"void restructurer::tileLoops(const Database::trans_vec_t &trans_vec, SgStatement *base, SgForStatement *loop, int nest_level, const string &ref_out,","targetRectangle":{"y":310.89182806015015,"x":539.24923086166382,"width":88.814453125,"height":1}},{"text":"    const DependenceGraph &orig_dep_graph) {","targetRectangle":{"y":311.89182806015015,"x":539.24923086166382,"width":26.404296875,"height":1}},{"text":"    SgProject *project = SageInterface::getProject();","targetRectangle":{"y":313.89182806015015,"x":539.24923086166382,"width":31.80517578125,"height":1}},{"text":"    Database *db = Database::getInstance();","targetRectangle":{"y":314.89182806015015,"x":539.24923086166382,"width":25.80419921875,"height":1}},{"text":"    SgForStatement *target_loop = loop;","targetRectangle":{"y":316.89182806015015,"x":539.24923086166382,"width":23.40380859375,"height":1}},{"text":"    vector<int> trips;","targetRectangle":{"y":317.89182806015015,"x":539.24923086166382,"width":13.2021484375,"height":1}},{"text":"    for (int i = 0; i < nest_level - 1; ++i) {","targetRectangle":{"y":319.89182806015015,"x":539.24923086166382,"width":27.6044921875,"height":1}},{"text":"        trips.push_back(getForLoopTripCount(target_loop));","targetRectangle":{"y":321.89182806015015,"x":539.24923086166382,"width":34.8056640625,"height":1}},{"text":"        SgBasicBlock *body = isSgBasicBlock(target_loop->get_loop_body());","targetRectangle":{"y":323.89182806015015,"x":539.24923086166382,"width":44.4072265625,"height":1}},{"text":"        ROSE_ASSERT(body != NULL);","targetRectangle":{"y":324.89182806015015,"x":539.24923086166382,"width":20.4033203125,"height":1}},{"text":"        SgStatementPtrList stmts = body->get_statements();","targetRectangle":{"y":326.89182806015015,"x":539.24923086166382,"width":34.8056640625,"height":1}},{"text":"        for (SgStatementPtrList::iterator itr = stmts.begin(); itr != stmts.end(); ++itr) {","targetRectangle":{"y":327.89182806015015,"x":539.24923086166382,"width":54.60888671875,"height":1}},{"text":"            if (isSgForStatement(*itr)) {","targetRectangle":{"y":328.89182806015015,"x":539.24923086166382,"width":24.60400390625,"height":1}},{"text":"                target_loop = isSgForStatement(*itr);","targetRectangle":{"y":329.89182806015015,"x":539.24923086166382,"width":31.80517578125,"height":1}},{"text":"                break;","targetRectangle":{"y":330.89182806015015,"x":539.24923086166382,"width":13.2021484375,"height":1}},{"text":"            }","targetRectangle":{"y":331.89182806015015,"x":539.24923086166382,"width":7.80126953125,"height":1}},{"text":"        }","targetRectangle":{"y":332.89182806015015,"x":539.24923086166382,"width":5.40087890625,"height":1}},{"text":"    }","targetRectangle":{"y":333.89182806015015,"x":539.24923086166382,"width":3.00048828125,"height":1}},{"text":"    trips.push_back(getForLoopTripCount(target_loop));","targetRectangle":{"y":335.89182806015015,"x":539.24923086166382,"width":32.4052734375,"height":1}},{"text":"    SgStatement *parent = isSgStatement(loop->get_parent());","targetRectangle":{"y":337.89182806015015,"x":539.24923086166382,"width":36.005859375,"height":1}},{"text":"    size_t child_idx = parent->get_childIndex(loop);","targetRectangle":{"y":338.89182806015015,"x":539.24923086166382,"width":31.205078125,"height":1}},{"text":"    SgStatement *old_copy = NULL;","targetRectangle":{"y":340.89182806015015,"x":539.24923086166382,"width":19.80322265625,"height":1}},{"text":"    SgStatement *new_copy = parent;","targetRectangle":{"y":341.89182806015015,"x":539.24923086166382,"width":21.00341796875,"height":1}},{"text":"    for (int i = 1; i < nest_level + 1; ++i) {","targetRectangle":{"y":343.89182806015015,"x":539.24923086166382,"width":27.6044921875,"height":1}},{"text":"        if (!orig_dep_graph.isTilingLegal(i - 1)) {","targetRectangle":{"y":345.89182806015015,"x":539.24923086166382,"width":30.60498046875,"height":1}},{"text":"            cout << \\\"Tiling at level \\\" << i << \\\" is illegal\\\" << endl;","targetRectangle":{"y":346.89182806015015,"x":539.24923086166382,"width":41.40673828125,"height":1}},{"text":"            continue;","targetRectangle":{"y":347.89182806015015,"x":539.24923086166382,"width":12.60205078125,"height":1}},{"text":"        }","targetRectangle":{"y":348.89182806015015,"x":539.24923086166382,"width":5.40087890625,"height":1}},{"text":"        int trip = trips[i - 1];","targetRectangle":{"y":350.89182806015015,"x":539.24923086166382,"width":19.203125,"height":1}},{"text":"        int bound = 32;","targetRectangle":{"y":351.89182806015015,"x":539.24923086166382,"width":13.80224609375,"height":1}},{"text":"        if (trip < 32 && trip != -1) {","targetRectangle":{"y":352.89182806015015,"x":539.24923086166382,"width":22.8037109375,"height":1}},{"text":"            bound = trip;","targetRectangle":{"y":353.89182806015015,"x":539.24923086166382,"width":15.00244140625,"height":1}},{"text":"        }","targetRectangle":{"y":354.89182806015015,"x":539.24923086166382,"width":5.40087890625,"height":1}},{"text":"        for (int tile_sz = 8; tile_sz <= bound; tile_sz *= 2) {","targetRectangle":{"y":356.89182806015015,"x":539.24923086166382,"width":37.80615234375,"height":1}},{"text":"            old_copy = new_copy;","targetRectangle":{"y":358.89182806015015,"x":539.24923086166382,"width":19.203125,"height":1}},{"text":"            new_copy = SageInterface::copyStatement(parent);","targetRectangle":{"y":359.89182806015015,"x":539.24923086166382,"width":36.005859375,"height":1}},{"text":"            SgForStatement *new_loop = isSgForStatement(new_copy->get_traversalSuccessorByIndex(child_idx));","targetRectangle":{"y":361.89182806015015,"x":539.24923086166382,"width":64.810546875,"height":1}},{"text":"            \/\/printBanner(\\\"Loop Tiling\\\");","targetRectangle":{"y":363.89182806015015,"x":539.24923086166382,"width":24.60400390625,"height":1}},{"text":"            SageInterface::replaceStatement(old_copy, new_copy);","targetRectangle":{"y":365.89182806015015,"x":539.24923086166382,"width":38.40625,"height":1}},{"text":"            if (old_copy != parent) {","targetRectangle":{"y":366.89182806015015,"x":539.24923086166382,"width":22.20361328125,"height":1}},{"text":"                SageInterface::deepDelete(old_copy);","targetRectangle":{"y":367.89182806015015,"x":539.24923086166382,"width":31.205078125,"height":1}},{"text":"            }","targetRectangle":{"y":368.89182806015015,"x":539.24923086166382,"width":7.80126953125,"height":1}},{"text":"            if (SageInterface::loopTiling(new_loop, i, tile_sz)) {","targetRectangle":{"y":370.89182806015015,"x":539.24923086166382,"width":39.6064453125,"height":1}},{"text":"                cout << \\\"Tiled a loop at level \\\" << i << \\\" with tile size \\\" << tile_sz << endl;","targetRectangle":{"y":372.89182806015015,"x":539.24923086166382,"width":57.00927734375,"height":1}},{"text":"                if (generate_output(ref_out, db->getMutationNumber())) {","targetRectangle":{"y":373.89182806015015,"x":539.24923086166382,"width":43.20703125,"height":1}},{"text":"                    stringstream ss;","targetRectangle":{"y":375.89182806015015,"x":539.24923086166382,"width":21.603515625,"height":1}},{"text":"                    ss << \\\"level=\\\" << i << \\\",size=\\\" << tile_sz;","targetRectangle":{"y":376.89182806015015,"x":539.24923086166382,"width":37.80615234375,"height":1}},{"text":"                    Database::trans_vec_t tmp_vec = trans_vec;","targetRectangle":{"y":378.89182806015015,"x":539.24923086166382,"width":37.2060546875,"height":1}},{"text":"                    Database::Transformation trans(\\\"tiling\\\", ss.str());","targetRectangle":{"y":379.89182806015015,"x":539.24923086166382,"width":42.60693359375,"height":1}},{"text":"                    tmp_vec.push_back(trans);","targetRectangle":{"y":381.89182806015015,"x":539.24923086166382,"width":27.00439453125,"height":1}},{"text":"                    db->addMutation(tmp_vec);","targetRectangle":{"y":383.89182806015015,"x":539.24923086166382,"width":27.00439453125,"height":1}},{"text":"                    unrollInnerLoops(tmp_vec, new_copy, ref_out);","targetRectangle":{"y":385.89182806015015,"x":539.24923086166382,"width":39.00634765625,"height":1}},{"text":"                    distributeInnerLoops(tmp_vec, new_copy, ref_out, orig_dep_graph);","targetRectangle":{"y":386.89182806015015,"x":539.24923086166382,"width":51.00830078125,"height":1}},{"text":"                }","targetRectangle":{"y":387.89182806015015,"x":539.24923086166382,"width":10.20166015625,"height":1}},{"text":"            } else {","targetRectangle":{"y":388.89182806015015,"x":539.24923086166382,"width":12.001953125,"height":1}},{"text":"                cout << \\\"Failed to tile a loop\\\" << endl;","targetRectangle":{"y":389.89182806015015,"x":539.24923086166382,"width":33.60546875,"height":1}},{"text":"            }","targetRectangle":{"y":390.89182806015015,"x":539.24923086166382,"width":7.80126953125,"height":1}},{"text":"        }","targetRectangle":{"y":392.89182806015015,"x":539.24923086166382,"width":5.40087890625,"height":1}},{"text":"    }","targetRectangle":{"y":394.89182806015015,"x":539.24923086166382,"width":3.00048828125,"height":1}},{"text":"    if (new_copy != parent) {","targetRectangle":{"y":396.89182806015015,"x":539.24923086166382,"width":17.40283203125,"height":1}},{"text":"        SageInterface::replaceStatement(new_copy, parent);","targetRectangle":{"y":397.89182806015015,"x":539.24923086166382,"width":34.8056640625,"height":1}},{"text":"        SageInterface::deepDelete(new_copy);","targetRectangle":{"y":398.89182806015015,"x":539.24923086166382,"width":26.404296875,"height":1}},{"text":"    }","targetRectangle":{"y":399.89182806015015,"x":539.24923086166382,"width":3.00048828125,"height":1}},{"text":"}","targetRectangle":{"y":401.89182806015015,"x":539.24923086166382,"width":0.60009765625,"height":1}},{"text":"void restructurer::distributeInnerLoops(const Database::trans_vec_t &trans_vec, SgStatement *base, const std::string &ref_out,","targetRectangle":{"y":403.89182806015015,"x":539.24923086166382,"width":75.6123046875,"height":1}},{"text":"    const DependenceGraph &orig_dep_graph, bool if_unroll) {","targetRectangle":{"y":404.89182806015015,"x":539.24923086166382,"width":36.005859375,"height":1}},{"text":"    static bool success_history = true;","targetRectangle":{"y":406.89182806015015,"x":539.24923086166382,"width":23.40380859375,"height":1}},{"text":"    if (success_history == false) {","targetRectangle":{"y":407.89182806015015,"x":539.24923086166382,"width":21.00341796875,"height":1}},{"text":"        return;","targetRectangle":{"y":408.89182806015015,"x":539.24923086166382,"width":9.00146484375,"height":1}},{"text":"    }","targetRectangle":{"y":409.89182806015015,"x":539.24923086166382,"width":3.00048828125,"height":1}},{"text":"    Rose_STL_Container<SgNode *> if_list = NodeQuery::querySubTree(base, V_SgIfStmt);","targetRectangle":{"y":411.89182806015015,"x":539.24923086166382,"width":51.00830078125,"height":1}},{"text":"    if (if_list.size()) {","targetRectangle":{"y":412.89182806015015,"x":539.24923086166382,"width":15.00244140625,"height":1}},{"text":"        return;","targetRectangle":{"y":413.89182806015015,"x":539.24923086166382,"width":9.00146484375,"height":1}},{"text":"    }","targetRectangle":{"y":414.89182806015015,"x":539.24923086166382,"width":3.00048828125,"height":1}},{"text":"    SgProject *project = SageInterface::getProject();","targetRectangle":{"y":416.89182806015015,"x":539.24923086166382,"width":31.80517578125,"height":1}},{"text":"    Database *db = Database::getInstance();","targetRectangle":{"y":417.89182806015015,"x":539.24923086166382,"width":25.80419921875,"height":1}},{"text":"    SgStatement *new_copy = SageInterface::copyStatement(base);","targetRectangle":{"y":419.89182806015015,"x":539.24923086166382,"width":37.80615234375,"height":1}},{"text":"    SageInterface::replaceStatement(base, new_copy);","targetRectangle":{"y":420.89182806015015,"x":539.24923086166382,"width":31.205078125,"height":1}},{"text":"    DependenceGraph dep_graph;","targetRectangle":{"y":422.89182806015015,"x":539.24923086166382,"width":18.0029296875,"height":1}},{"text":"    InnerLoopIdentifier finder;","targetRectangle":{"y":424.89182806015015,"x":539.24923086166382,"width":18.60302734375,"height":1}},{"text":"    finder.traverseInputFiles(project);","targetRectangle":{"y":425.89182806015015,"x":539.24923086166382,"width":23.40380859375,"height":1}},{"text":"    \/\/printBanner(\\\"Loop Fission\\\");","targetRectangle":{"y":427.89182806015015,"x":539.24923086166382,"width":20.4033203125,"height":1}},{"text":"    const loop_vec_t &inner_loop_vec = finder.getInnerLoopVec();","targetRectangle":{"y":429.89182806015015,"x":539.24923086166382,"width":38.40625,"height":1}},{"text":"    \/\/orig_dep_graph.printDepSet(cout);","targetRectangle":{"y":431.89182806015015,"x":539.24923086166382,"width":23.40380859375,"height":1}},{"text":"    ","targetRectangle":{"y":432.89182806015015,"x":539.24923086166382,"width":2.400390625,"height":1}},{"text":"    bool if_changed = false;","targetRectangle":{"y":433.89182806015015,"x":539.24923086166382,"width":16.802734375,"height":1}},{"text":"    for (loop_vec_t::const_iterator citr = inner_loop_vec.begin(); citr != inner_loop_vec.end(); ++citr) {","targetRectangle":{"y":434.89182806015015,"x":539.24923086166382,"width":63.6103515625,"height":1}},{"text":"        SgForStatement *loop = *citr;","targetRectangle":{"y":436.89182806015015,"x":539.24923086166382,"width":22.20361328125,"height":1}},{"text":"        if (!SageInterface::isAncestor(new_copy, loop)) {","targetRectangle":{"y":438.89182806015015,"x":539.24923086166382,"width":34.20556640625,"height":1}},{"text":"            continue;","targetRectangle":{"y":439.89182806015015,"x":539.24923086166382,"width":12.60205078125,"height":1}},{"text":"        }","targetRectangle":{"y":440.89182806015015,"x":539.24923086166382,"width":5.40087890625,"height":1}},{"text":"        vector<set<int> > disjoint_sets = dep_graph.getDisjointStatmentSets();","targetRectangle":{"y":442.89182806015015,"x":539.24923086166382,"width":46.8076171875,"height":1}},{"text":"        \/*for (int i = 0; i < disjoint_sets.size(); ++i) {","targetRectangle":{"y":444.89182806015015,"x":539.24923086166382,"width":34.8056640625,"height":1}},{"text":"            set<int> &s = disjoint_sets[i];","targetRectangle":{"y":445.89182806015015,"x":539.24923086166382,"width":25.80419921875,"height":1}},{"text":"            for (set<int>::iterator sitr = s.begin(); sitr != s.end(); ++sitr) {","targetRectangle":{"y":446.89182806015015,"x":539.24923086166382,"width":48.0078125,"height":1}},{"text":"                cout << *sitr << \\\" \\\";","targetRectangle":{"y":447.89182806015015,"x":539.24923086166382,"width":22.20361328125,"height":1}},{"text":"            }","targetRectangle":{"y":448.89182806015015,"x":539.24923086166382,"width":7.80126953125,"height":1}},{"text":"            cout << endl;","targetRectangle":{"y":449.89182806015015,"x":539.24923086166382,"width":15.00244140625,"height":1}},{"text":"        }*\/","targetRectangle":{"y":450.89182806015015,"x":539.24923086166382,"width":6.60107421875,"height":1}},{"text":"        if (disjoint_sets.size() == 1) {","targetRectangle":{"y":452.89182806015015,"x":539.24923086166382,"width":24.00390625,"height":1}},{"text":"            continue;","targetRectangle":{"y":453.89182806015015,"x":539.24923086166382,"width":12.60205078125,"height":1}},{"text":"        }","targetRectangle":{"y":454.89182806015015,"x":539.24923086166382,"width":5.40087890625,"height":1}},{"text":"        int cnt = 0;","targetRectangle":{"y":456.89182806015015,"x":539.24923086166382,"width":12.001953125,"height":1}},{"text":"        for (vector<set<int> >::iterator v_itr = disjoint_sets.begin(); v_itr != disjoint_sets.end(); ++v_itr) {","targetRectangle":{"y":457.89182806015015,"x":539.24923086166382,"width":67.2109375,"height":1}},{"text":"            vector<SgExprStatement *> expr_list;","targetRectangle":{"y":459.89182806015015,"x":539.24923086166382,"width":28.8046875,"height":1}},{"text":"            for (set<int>::iterator s_itr = v_itr->begin(); s_itr != v_itr->end(); ++s_itr) {","targetRectangle":{"y":460.89182806015015,"x":539.24923086166382,"width":55.80908203125,"height":1}},{"text":"                SgExprStatement *expr = dep_graph.getStatementById(*s_itr);","targetRectangle":{"y":461.89182806015015,"x":539.24923086166382,"width":45.00732421875,"height":1}},{"text":"                if (SageInterface::isAncestor(loop, expr)) {","targetRectangle":{"y":462.89182806015015,"x":539.24923086166382,"width":36.005859375,"height":1}},{"text":"                    \/\/cout << expr->unparseToString() << endl;","targetRectangle":{"y":463.89182806015015,"x":539.24923086166382,"width":37.2060546875,"height":1}},{"text":"                    expr_list.push_back(isSgExprStatement(SageInterface::copyStatement(expr)));","targetRectangle":{"y":464.89182806015015,"x":539.24923086166382,"width":57.00927734375,"height":1}},{"text":"                }","targetRectangle":{"y":465.89182806015015,"x":539.24923086166382,"width":10.20166015625,"height":1}},{"text":"            }","targetRectangle":{"y":466.89182806015015,"x":539.24923086166382,"width":7.80126953125,"height":1}},{"text":"            if (expr_list.size()) {","targetRectangle":{"y":468.89182806015015,"x":539.24923086166382,"width":21.00341796875,"height":1}},{"text":"                SgForStatement *new_loop = isSgForStatement(SageInterface::copyStatement(loop));","targetRectangle":{"y":470.89182806015015,"x":539.24923086166382,"width":57.609375,"height":1}},{"text":"                SageInterface::insertStatement(loop, new_loop);","targetRectangle":{"y":471.89182806015015,"x":539.24923086166382,"width":37.80615234375,"height":1}},{"text":"                SgStatement *old_body = new_loop->get_loop_body();","targetRectangle":{"y":473.89182806015015,"x":539.24923086166382,"width":39.6064453125,"height":1}},{"text":"                SgBasicBlock *new_body = SageBuilder::buildBasicBlock();","targetRectangle":{"y":474.89182806015015,"x":539.24923086166382,"width":43.20703125,"height":1}},{"text":"                for (vector<SgExprStatement *>::iterator expr_itr = expr_list.begin(); expr_itr != expr_list.end(); ++expr_itr) {","targetRectangle":{"y":476.89182806015015,"x":539.24923086166382,"width":77.41259765625,"height":1}},{"text":"                    SageInterface::appendStatement(*expr_itr, new_body);","targetRectangle":{"y":477.89182806015015,"x":539.24923086166382,"width":43.20703125,"height":1}},{"text":"                }","targetRectangle":{"y":478.89182806015015,"x":539.24923086166382,"width":10.20166015625,"height":1}},{"text":"                new_loop->set_loop_body(new_body);","targetRectangle":{"y":480.89182806015015,"x":539.24923086166382,"width":30.0048828125,"height":1}},{"text":"                SageInterface::deepDelete(old_body);","targetRectangle":{"y":481.89182806015015,"x":539.24923086166382,"width":31.205078125,"height":1}},{"text":"                cnt++;","targetRectangle":{"y":483.89182806015015,"x":539.24923086166382,"width":13.2021484375,"height":1}},{"text":"            }","targetRectangle":{"y":485.89182806015015,"x":539.24923086166382,"width":7.80126953125,"height":1}},{"text":"        }","targetRectangle":{"y":487.89182806015015,"x":539.24923086166382,"width":5.40087890625,"height":1}},{"text":"        if (cnt > 1) {","targetRectangle":{"y":489.89182806015015,"x":539.24923086166382,"width":13.2021484375,"height":1}},{"text":"            cout << \\\"Distributed a loop into \\\" << cnt << \\\" loops\\\" << endl;","targetRectangle":{"y":490.89182806015015,"x":539.24923086166382,"width":44.4072265625,"height":1}},{"text":"            if_changed = true;","targetRectangle":{"y":491.89182806015015,"x":539.24923086166382,"width":18.0029296875,"height":1}},{"text":"        }","targetRectangle":{"y":492.89182806015015,"x":539.24923086166382,"width":5.40087890625,"height":1}},{"text":"        SageInterface::removeStatement(loop);","targetRectangle":{"y":494.89182806015015,"x":539.24923086166382,"width":27.00439453125,"height":1}},{"text":"        SageInterface::deepDelete(loop);","targetRectangle":{"y":495.89182806015015,"x":539.24923086166382,"width":24.00390625,"height":1}},{"text":"    }","targetRectangle":{"y":497.89182806015015,"x":539.24923086166382,"width":3.00048828125,"height":1}},{"text":"    success_history = false;","targetRectangle":{"y":499.89182806015015,"x":539.24923086166382,"width":16.802734375,"height":1}},{"text":"    if (if_changed) {","targetRectangle":{"y":500.89182806015015,"x":539.24923086166382,"width":12.60205078125,"height":1}},{"text":"        if (generate_output(ref_out, db->getMutationNumber())) {","targetRectangle":{"y":501.89182806015015,"x":539.24923086166382,"width":38.40625,"height":1}},{"text":"            success_history = true;","targetRectangle":{"y":503.89182806015015,"x":539.24923086166382,"width":21.00341796875,"height":1}},{"text":"            stringstream ss;","targetRectangle":{"y":505.89182806015015,"x":539.24923086166382,"width":16.802734375,"height":1}},{"text":"            ss << \\\"allow_dep=\\\" << 0;","targetRectangle":{"y":506.89182806015015,"x":539.24923086166382,"width":21.603515625,"height":1}},{"text":"            Database::trans_vec_t tmp_vec = trans_vec;","targetRectangle":{"y":508.89182806015015,"x":539.24923086166382,"width":32.4052734375,"height":1}},{"text":"            Database::Transformation trans(\\\"distribution\\\", ss.str());","targetRectangle":{"y":509.89182806015015,"x":539.24923086166382,"width":41.40673828125,"height":1}},{"text":"            tmp_vec.push_back(trans);","targetRectangle":{"y":511.89182806015015,"x":539.24923086166382,"width":22.20361328125,"height":1}},{"text":"            db->addMutation(tmp_vec);","targetRectangle":{"y":513.89182806015015,"x":539.24923086166382,"width":22.20361328125,"height":1}},{"text":"            if (if_unroll) {","targetRectangle":{"y":515.89182806015015,"x":539.24923086166382,"width":16.802734375,"height":1}},{"text":"                unrollInnerLoops(tmp_vec, new_copy, ref_out, false);","targetRectangle":{"y":516.89182806015015,"x":539.24923086166382,"width":40.806640625,"height":1}},{"text":"            }","targetRectangle":{"y":517.89182806015015,"x":539.24923086166382,"width":7.80126953125,"height":1}},{"text":"        }","targetRectangle":{"y":518.89182806015015,"x":539.24923086166382,"width":5.40087890625,"height":1}},{"text":"    }","targetRectangle":{"y":519.89182806015015,"x":539.24923086166382,"width":3.00048828125,"height":1}},{"text":"    SageInterface::replaceStatement(new_copy, base);","targetRectangle":{"y":521.89182806015015,"x":539.24923086166382,"width":31.205078125,"height":1}},{"text":"    SageInterface::deepDelete(new_copy);","targetRectangle":{"y":522.89182806015015,"x":539.24923086166382,"width":24.00390625,"height":1}},{"text":"}","targetRectangle":{"y":524.89182806015015,"x":539.24923086166382,"width":0.60009765625,"height":1}},{"text":"￼","targetRectangle":{"y":502.50000006705523,"x":685.25546884536743,"width":14.14453125,"height":14}},{"text":"#include <iostream>","targetRectangle":{"y":71.135446071624756,"x":448.34743642807007,"width":11.40185546875,"height":1}},{"text":"#include <sstream>","targetRectangle":{"y":72.135446071624756,"x":448.34743642807007,"width":10.8017578125,"height":1}},{"text":"#include <fstream>","targetRectangle":{"y":73.135446071624756,"x":448.34743642807007,"width":10.8017578125,"height":1}},{"text":"#include <vector>","targetRectangle":{"y":74.135446071624756,"x":448.34743642807007,"width":10.20166015625,"height":1}},{"text":"#include <map>","targetRectangle":{"y":75.135446071624756,"x":448.34743642807007,"width":8.4013671875,"height":1}},{"text":"#include <algorithm>","targetRectangle":{"y":76.135446071624756,"x":448.34743642807007,"width":12.001953125,"height":1}},{"text":"#include <functional>","targetRectangle":{"y":77.135446071624756,"x":448.34743642807007,"width":12.60205078125,"height":1}},{"text":"#include <numeric>","targetRectangle":{"y":78.135446071624756,"x":448.34743642807007,"width":10.8017578125,"height":1}},{"text":"#include <cstdio>","targetRectangle":{"y":79.135446071624756,"x":448.34743642807007,"width":10.20166015625,"height":1}},{"text":"#include \\\"rose.h\\\"","targetRectangle":{"y":81.135446071624756,"x":448.34743642807007,"width":10.20166015625,"height":1}},{"text":"#include <CPPAstInterface.h>","targetRectangle":{"y":83.135446071624756,"x":448.34743642807007,"width":16.802734375,"height":1}},{"text":"#include <ArrayAnnot.h>","targetRectangle":{"y":84.135446071624756,"x":448.34743642807007,"width":13.80224609375,"height":1}},{"text":"#include <ArrayRewrite.h>","targetRectangle":{"y":85.135446071624756,"x":448.34743642807007,"width":15.00244140625,"height":1}},{"text":"#include <AstInterface_ROSE.h>","targetRectangle":{"y":87.135446071624756,"x":448.34743642807007,"width":18.0029296875,"height":1}},{"text":"#include <LoopTransformInterface.h>","targetRectangle":{"y":88.135446071624756,"x":448.34743642807007,"width":21.00341796875,"height":1}},{"text":"#include <AnnotCollect.h>","targetRectangle":{"y":89.135446071624756,"x":448.34743642807007,"width":15.00244140625,"height":1}},{"text":"#include <OperatorAnnotation.h>","targetRectangle":{"y":90.135446071624756,"x":448.34743642807007,"width":18.60302734375,"height":1}},{"text":"#include <candl\/candl.h>","targetRectangle":{"y":92.135446071624756,"x":448.34743642807007,"width":14.40234375,"height":1}},{"text":"#include <scoplib\/scop.h>","targetRectangle":{"y":93.135446071624756,"x":448.34743642807007,"width":15.00244140625,"height":1}},{"text":"#include <polyopt\/PolyOpt.hpp>","targetRectangle":{"y":95.135446071624756,"x":448.34743642807007,"width":18.0029296875,"height":1}},{"text":"#include <polyopt\/ScopExtractor.hpp>","targetRectangle":{"y":96.135446071624756,"x":448.34743642807007,"width":21.603515625,"height":1}},{"text":"#include <polyopt\/SageNodeAnnotation.hpp>","targetRectangle":{"y":97.135446071624756,"x":448.34743642807007,"width":24.60400390625,"height":1}},{"text":"#include <utils.hh>","targetRectangle":{"y":99.135446071624756,"x":448.34743642807007,"width":11.40185546875,"height":1}},{"text":"#include <transformation.hh>","targetRectangle":{"y":100.13544607162476,"x":448.34743642807007,"width":16.802734375,"height":1}},{"text":"#include <dependence.hh>","targetRectangle":{"y":101.13544607162476,"x":448.34743642807007,"width":14.40234375,"height":1}},{"text":"#include <analysis.hh>","targetRectangle":{"y":102.13544607162476,"x":448.34743642807007,"width":13.2021484375,"height":1}},{"text":"#include <database.hh>","targetRectangle":{"y":103.13544607162476,"x":448.34743642807007,"width":13.2021484375,"height":1}},{"text":"#include <config.hh>","targetRectangle":{"y":104.13544607162476,"x":448.34743642807007,"width":12.001953125,"height":1}},{"text":"#include <staticfeature.hh>","targetRectangle":{"y":105.13544607162476,"x":448.34743642807007,"width":16.20263671875,"height":1}},{"text":"#include <boost\/program_options.hpp>","targetRectangle":{"y":107.13544607162476,"x":448.34743642807007,"width":21.603515625,"height":1}},{"text":"using namespace std;","targetRectangle":{"y":110.13544607162476,"x":448.34743642807007,"width":12.001953125,"height":1}},{"text":"using namespace restructurer;","targetRectangle":{"y":111.13544607162476,"x":448.34743642807007,"width":17.40283203125,"height":1}},{"text":"namespace po = boost::program_options;","targetRectangle":{"y":113.13544607162476,"x":448.34743642807007,"width":22.8037109375,"height":1}},{"text":"int main(int argc, char* argv[]) {","targetRectangle":{"y":115.13544607162476,"x":448.34743642807007,"width":20.4033203125,"height":1}},{"text":"    po::options_description description(\\\"restructurer usage\\\");","targetRectangle":{"y":118.13544607162476,"x":448.34743642807007,"width":37.2060546875,"height":1}},{"text":"    description.add_options()","targetRectangle":{"y":120.13544607162476,"x":448.34743642807007,"width":17.40283203125,"height":1}},{"text":"        (\\\"help\\\", \\\"Display this help message\\\")","targetRectangle":{"y":121.13544607162476,"x":448.34743642807007,"width":27.00439453125,"height":1}},{"text":"        (\\\"benchmark\\\", po::value<string>(), \\\"Specify the benchmark\\\")","targetRectangle":{"y":122.13544607162476,"x":448.34743642807007,"width":40.20654296875,"height":1}},{"text":"        (\\\"version\\\", po::value<string>(), \\\"Specify the version of the benchmark\\\")","targetRectangle":{"y":123.13544607162476,"x":448.34743642807007,"width":48.0078125,"height":1}},{"text":"        (\\\"application\\\", po::value<string>(), \\\"Specify the application in the benchmark\\\")","targetRectangle":{"y":124.13544607162476,"x":448.34743642807007,"width":52.80859375,"height":1}},{"text":"        (\\\"file\\\", po::value<string>(), \\\"Specify the file that contains the loop\\\")","targetRectangle":{"y":125.13544607162476,"x":448.34743642807007,"width":48.0078125,"height":1}},{"text":"        (\\\"function\\\", po::value<string>(), \\\"Specify the function that contains the loop\\\")","targetRectangle":{"y":126.13544607162476,"x":448.34743642807007,"width":52.80859375,"height":1}},{"text":"        (\\\"line\\\", po::value<string>(), \\\"Specify the starting line number of the loop\\\")","targetRectangle":{"y":127.13544607162476,"x":448.34743642807007,"width":51.00830078125,"height":1}},{"text":"        (\\\"skipinterchangetiling\\\", \\\"Do not perform interchange or tiling\\\")","targetRectangle":{"y":128.13544607162476,"x":448.34743642807007,"width":43.80712890625,"height":1}},{"text":"        (\\\"nodb\\\", \\\"Do not write to database\\\")","targetRectangle":{"y":129.13544607162476,"x":448.34743642807007,"width":26.404296875,"height":1}},{"text":"        (\\\"dependenceonly\\\", \\\"Only output the dependence information of the original loop nest\\\")","targetRectangle":{"y":130.13544607162476,"x":448.34743642807007,"width":56.4091796875,"height":1}},{"text":"        (\\\"extractstaticfeatures\\\", \\\"Only extract static features of the original loop nest\\\");","targetRectangle":{"y":131.13544607162476,"x":448.34743642807007,"width":55.208984375,"height":1}},{"text":"    string benchmark, version, application, file_name, func_name, line_no;","targetRectangle":{"y":133.13544607162476,"x":448.34743642807007,"width":44.4072265625,"height":1}},{"text":"    bool dependenceonly = false;","targetRectangle":{"y":134.13544607162476,"x":448.34743642807007,"width":19.203125,"height":1}},{"text":"    bool extractstaticfeatures = false;","targetRectangle":{"y":135.13544607162476,"x":448.34743642807007,"width":23.40380859375,"height":1}},{"text":"    bool skip_interchange_tiling = false;","targetRectangle":{"y":136.13544607162476,"x":448.34743642807007,"width":24.60400390625,"height":1}},{"text":"    try {","targetRectangle":{"y":138.13544607162476,"x":448.34743642807007,"width":5.40087890625,"height":1}},{"text":"        po::variables_map vm;","targetRectangle":{"y":140.13544607162476,"x":448.34743642807007,"width":17.40283203125,"height":1}},{"text":"        po::store(po::command_line_parser(argc, argv).options(description).allow_unregistered().run(), vm);","targetRectangle":{"y":141.13544607162476,"x":448.34743642807007,"width":64.21044921875,"height":1}},{"text":"        po::notify(vm);","targetRectangle":{"y":142.13544607162476,"x":448.34743642807007,"width":13.80224609375,"height":1}},{"text":"        if (vm.count(\\\"nodb\\\")) {","targetRectangle":{"y":144.13544607162476,"x":448.34743642807007,"width":18.60302734375,"height":1}},{"text":"            write_to_db = false;","targetRectangle":{"y":145.13544607162476,"x":448.34743642807007,"width":19.203125,"height":1}},{"text":"        } else {","targetRectangle":{"y":146.13544607162476,"x":448.34743642807007,"width":9.6015625,"height":1}},{"text":"            if (!(vm.count(\\\"benchmark\\\") && vm.count(\\\"version\\\") && vm.count(\\\"application\\\") && vm.count(\\\"file\\\") && vm.count(\\\"function\\\") && vm.count(\\\"line\\\"))) {","targetRectangle":{"y":147.13544607162476,"x":448.34743642807007,"width":94.21533203125,"height":1}},{"text":"                throw std::exception();","targetRectangle":{"y":148.13544607162476,"x":448.34743642807007,"width":23.40380859375,"height":1}},{"text":"            }","targetRectangle":{"y":149.13544607162476,"x":448.34743642807007,"width":7.80126953125,"height":1}},{"text":"            benchmark = vm[\\\"benchmark\\\"].as<string>();","targetRectangle":{"y":151.13544607162476,"x":448.34743642807007,"width":31.80517578125,"height":1}},{"text":"            version = vm[\\\"version\\\"].as<string>();","targetRectangle":{"y":152.13544607162476,"x":448.34743642807007,"width":29.40478515625,"height":1}},{"text":"            application = vm[\\\"application\\\"].as<string>();","targetRectangle":{"y":153.13544607162476,"x":448.34743642807007,"width":34.20556640625,"height":1}},{"text":"            file_name = vm[\\\"file\\\"].as<string>();","targetRectangle":{"y":154.13544607162476,"x":448.34743642807007,"width":28.8046875,"height":1}},{"text":"            func_name = vm[\\\"function\\\"].as<string>();","targetRectangle":{"y":155.13544607162476,"x":448.34743642807007,"width":31.205078125,"height":1}},{"text":"            line_no = vm[\\\"line\\\"].as<string>();","targetRectangle":{"y":156.13544607162476,"x":448.34743642807007,"width":27.6044921875,"height":1}},{"text":"        }","targetRectangle":{"y":158.13544607162476,"x":448.34743642807007,"width":5.40087890625,"height":1}},{"text":"        if (vm.count(\\\"dependenceonly\\\")) {","targetRectangle":{"y":160.13544607162476,"x":448.34743642807007,"width":24.60400390625,"height":1}},{"text":"            dependenceonly = true;","targetRectangle":{"y":161.13544607162476,"x":448.34743642807007,"width":20.4033203125,"height":1}},{"text":"        }","targetRectangle":{"y":162.13544607162476,"x":448.34743642807007,"width":5.40087890625,"height":1}},{"text":"        if (vm.count(\\\"extractstaticfeatures\\\")) {","targetRectangle":{"y":164.13544607162476,"x":448.34743642807007,"width":28.8046875,"height":1}},{"text":"            extractstaticfeatures = true;","targetRectangle":{"y":165.13544607162476,"x":448.34743642807007,"width":24.60400390625,"height":1}},{"text":"        }","targetRectangle":{"y":166.13544607162476,"x":448.34743642807007,"width":5.40087890625,"height":1}},{"text":"        if (vm.count(\\\"skipinterchangetiling\\\")) {","targetRectangle":{"y":168.13544607162476,"x":448.34743642807007,"width":28.8046875,"height":1}},{"text":"            skip_interchange_tiling = true;","targetRectangle":{"y":169.13544607162476,"x":448.34743642807007,"width":25.80419921875,"height":1}},{"text":"        }","targetRectangle":{"y":170.13544607162476,"x":448.34743642807007,"width":5.40087890625,"height":1}},{"text":"    } catch ( const std::exception& e ) {","targetRectangle":{"y":172.13544607162476,"x":448.34743642807007,"width":24.60400390625,"height":1}},{"text":"        cerr << \\\"Failed to process arguments \\\" << e.what() << endl;","targetRectangle":{"y":173.13544607162476,"x":448.34743642807007,"width":40.20654296875,"height":1}},{"text":"        return -1;","targetRectangle":{"y":174.13544607162476,"x":448.34743642807007,"width":10.8017578125,"height":1}},{"text":"    }","targetRectangle":{"y":175.13544607162476,"x":448.34743642807007,"width":3.00048828125,"height":1}},{"text":"    SgStringList args = CommandlineProcessing::generateArgListFromArgcArgv(argc, argv);","targetRectangle":{"y":177.13544607162476,"x":448.34743642807007,"width":52.20849609375,"height":1}},{"text":"    SgProject* project = frontend(args);","targetRectangle":{"y":178.13544607162476,"x":448.34743642807007,"width":24.00390625,"height":1}},{"text":"    ROSE_ASSERT(project != NULL);","targetRectangle":{"y":180.13544607162476,"x":448.34743642807007,"width":19.80322265625,"height":1}},{"text":"    SgFile &file = project->get_file(0);","targetRectangle":{"y":182.13544607162476,"x":448.34743642807007,"width":24.00390625,"height":1}},{"text":"    Sg_File_Info *file_info = file.get_file_info();","targetRectangle":{"y":183.13544607162476,"x":448.34743642807007,"width":30.60498046875,"height":1}},{"text":"    Database *db = Database::getInstance();","targetRectangle":{"y":185.13544607162476,"x":448.34743642807007,"width":25.80419921875,"height":1}},{"text":"    cout << \\\"benchmark: \\\" << benchmark << endl;","targetRectangle":{"y":187.13544607162476,"x":448.34743642807007,"width":28.20458984375,"height":1}},{"text":"    cout << \\\"version: \\\" << version << endl;","targetRectangle":{"y":188.13544607162476,"x":448.34743642807007,"width":25.80419921875,"height":1}},{"text":"    cout << \\\"application: \\\" << application << endl;","targetRectangle":{"y":189.13544607162476,"x":448.34743642807007,"width":30.60498046875,"height":1}},{"text":"    cout << \\\"file name: \\\" << file_name << endl;","targetRectangle":{"y":190.13544607162476,"x":448.34743642807007,"width":28.20458984375,"height":1}},{"text":"    cout << \\\"function: \\\" << func_name << endl;","targetRectangle":{"y":191.13544607162476,"x":448.34743642807007,"width":27.6044921875,"height":1}},{"text":"    cout << \\\"line: \\\" << line_no << endl;","targetRectangle":{"y":192.13544607162476,"x":448.34743642807007,"width":24.00390625,"height":1}},{"text":"    db->init(benchmark, version, application, file_name, func_name, line_no);","targetRectangle":{"y":194.13544607162476,"x":448.34743642807007,"width":46.20751953125,"height":1}},{"text":"    SageInterface::changeAllBodiesToBlocks(project);","targetRectangle":{"y":196.13544607162476,"x":448.34743642807007,"width":31.205078125,"height":1}},{"text":"    SgBasicBlock *body = NULL;","targetRectangle":{"y":198.13544607162476,"x":448.34743642807007,"width":18.0029296875,"height":1}},{"text":"    VariantVector vv_func(V_SgFunctionDefinition); ","targetRectangle":{"y":200.13544607162476,"x":448.34743642807007,"width":30.60498046875,"height":1}},{"text":"    Rose_STL_Container<SgNode*> funcion_list = NodeQuery::queryMemoryPool(vv_func); ","targetRectangle":{"y":201.13544607162476,"x":448.34743642807007,"width":50.408203125,"height":1}},{"text":"    for (Rose_STL_Container<SgNode*>::iterator f_itr = funcion_list.begin(); f_itr != funcion_list.end(); ++f_itr) {","targetRectangle":{"y":202.13544607162476,"x":448.34743642807007,"width":69.611328125,"height":1}},{"text":"        SgFunctionDefinition *cur_func = isSgFunctionDefinition(*f_itr);","targetRectangle":{"y":204.13544607162476,"x":448.34743642807007,"width":43.20703125,"height":1}},{"text":"        string name = cur_func->get_declaration()->get_name().getString();","targetRectangle":{"y":205.13544607162476,"x":448.34743642807007,"width":44.4072265625,"height":1}},{"text":"        SgBasicBlock *func_body = cur_func->get_body();","targetRectangle":{"y":206.13544607162476,"x":448.34743642807007,"width":33.00537109375,"height":1}},{"text":"        if (name == \\\"loop\\\" && func_body) {","targetRectangle":{"y":207.13544607162476,"x":448.34743642807007,"width":25.2041015625,"height":1}},{"text":"            body = func_body;","targetRectangle":{"y":209.13544607162476,"x":448.34743642807007,"width":17.40283203125,"height":1}},{"text":"        }","targetRectangle":{"y":211.13544607162476,"x":448.34743642807007,"width":5.40087890625,"height":1}},{"text":"    }","targetRectangle":{"y":212.13544607162476,"x":448.34743642807007,"width":3.00048828125,"height":1}},{"text":"    \/\/project->unparse();","targetRectangle":{"y":214.13544607162476,"x":448.34743642807007,"width":15.00244140625,"height":1}},{"text":"    \/\/cout << skip_interchange_tiling << endl;","targetRectangle":{"y":216.13544607162476,"x":448.34743642807007,"width":27.6044921875,"height":1}},{"text":"    \/\/return 0;","targetRectangle":{"y":217.13544607162476,"x":448.34743642807007,"width":9.00146484375,"height":1}},{"text":"    if (dependenceonly) {","targetRectangle":{"y":220.13544607162476,"x":448.34743642807007,"width":15.00244140625,"height":1}},{"text":"        ","targetRectangle":{"y":221.13544607162476,"x":448.34743642807007,"width":4.80078125,"height":1}},{"text":"        DependenceGraph orig_dep_graph;","targetRectangle":{"y":222.13544607162476,"x":448.34743642807007,"width":23.40380859375,"height":1}},{"text":"        ","targetRectangle":{"y":223.13544607162476,"x":448.34743642807007,"width":4.80078125,"height":1}},{"text":"        orig_dep_graph.printDepSet(cout);","targetRectangle":{"y":224.13544607162476,"x":448.34743642807007,"width":24.60400390625,"height":1}},{"text":"    \/\/orig_dep_graph.printStmtDepSet(cout);","targetRectangle":{"y":225.13544607162476,"x":448.34743642807007,"width":25.80419921875,"height":1}},{"text":"        ofstream dot(\\\"dep.dot\\\", ofstream::out);","targetRectangle":{"y":227.13544607162476,"x":448.34743642807007,"width":28.20458984375,"height":1}},{"text":"        orig_dep_graph.outputDot(dot);","targetRectangle":{"y":228.13544607162476,"x":448.34743642807007,"width":22.8037109375,"height":1}},{"text":"        dot.close();","targetRectangle":{"y":229.13544607162476,"x":448.34743642807007,"width":12.001953125,"height":1}},{"text":"        return 0;","targetRectangle":{"y":231.13544607162476,"x":448.34743642807007,"width":10.20166015625,"height":1}},{"text":"    }","targetRectangle":{"y":232.13544607162476,"x":448.34743642807007,"width":3.00048828125,"height":1}},{"text":"    InheritedAttribute inh_attr;","targetRectangle":{"y":235.13544607162476,"x":448.34743642807007,"width":19.203125,"height":1}},{"text":"    OuterLoopIdentifier first_pass;","targetRectangle":{"y":237.13544607162476,"x":448.34743642807007,"width":21.00341796875,"height":1}},{"text":"    first_pass.traverseInputFiles(project, inh_attr);","targetRectangle":{"y":238.13544607162476,"x":448.34743642807007,"width":31.80517578125,"height":1}},{"text":"    const loop_info_vec_t &outer_loop_vec = first_pass.getOuterLoopVec();","targetRectangle":{"y":240.13544607162476,"x":448.34743642807007,"width":43.80712890625,"height":1}},{"text":"    if (extractstaticfeatures) {","targetRectangle":{"y":242.13544607162476,"x":448.34743642807007,"width":19.203125,"height":1}},{"text":"        for (loop_info_vec_t::const_iterator citr = outer_loop_vec.begin(); citr != outer_loop_vec.end(); ++citr) {","targetRectangle":{"y":244.13544607162476,"x":448.34743642807007,"width":69.01123046875,"height":1}},{"text":"            OuterLoopInfo loop(*citr);","targetRectangle":{"y":246.13544607162476,"x":448.34743642807007,"width":22.8037109375,"height":1}},{"text":"            if (!SageInterface::isAncestor(body, loop.loop_)) {","targetRectangle":{"y":248.13544607162476,"x":448.34743642807007,"width":37.80615234375,"height":1}},{"text":"                continue;","targetRectangle":{"y":249.13544607162476,"x":448.34743642807007,"width":15.00244140625,"height":1}},{"text":"            }","targetRectangle":{"y":250.13544607162476,"x":448.34743642807007,"width":7.80126953125,"height":1}},{"text":"            int depth = loop.inner_loop_nest_depth_;","targetRectangle":{"y":252.13544607162476,"x":448.34743642807007,"width":31.205078125,"height":1}},{"text":"            StaticFeatureExtraction *extract = new StaticFeatureExtraction(loop.loop_, depth);","targetRectangle":{"y":254.13544607162476,"x":448.34743642807007,"width":56.4091796875,"height":1}},{"text":"            extract->startExtractingFeatures();","targetRectangle":{"y":255.13544607162476,"x":448.34743642807007,"width":28.20458984375,"height":1}},{"text":"            extract->writeToDataBase(db);","targetRectangle":{"y":257.13544607162476,"x":448.34743642807007,"width":24.60400390625,"height":1}},{"text":"            delete extract;","targetRectangle":{"y":259.13544607162476,"x":448.34743642807007,"width":16.20263671875,"height":1}},{"text":"        }","targetRectangle":{"y":260.13544607162476,"x":448.34743642807007,"width":5.40087890625,"height":1}},{"text":"        return 0;","targetRectangle":{"y":262.13544607162476,"x":448.34743642807007,"width":10.20166015625,"height":1}},{"text":"    }","targetRectangle":{"y":264.13544607162476,"x":448.34743642807007,"width":3.00048828125,"height":1}},{"text":"    string ref_out;","targetRectangle":{"y":266.13544607162476,"x":448.34743642807007,"width":11.40185546875,"height":1}},{"text":"    \/\/distributeInnerLoops(root, ref_out);","targetRectangle":{"y":268.13544607162476,"x":448.34743642807007,"width":25.2041015625,"height":1}},{"text":"    \/\/return 0;","targetRectangle":{"y":270.13544607162476,"x":448.34743642807007,"width":9.00146484375,"height":1}},{"text":"    string file_path(file.get_sourceFileNameWithPath());","targetRectangle":{"y":272.13544607162476,"x":448.34743642807007,"width":33.60546875,"height":1}},{"text":"    string bin_path(file_path + \\\".out\\\");","targetRectangle":{"y":273.13544607162476,"x":448.34743642807007,"width":24.00390625,"height":1}},{"text":"    if (verify_output) {","targetRectangle":{"y":275.13544607162476,"x":448.34743642807007,"width":14.40234375,"height":1}},{"text":"        printBanner(\\\"Generate Reference Output\\\");","targetRectangle":{"y":277.13544607162476,"x":448.34743642807007,"width":29.40478515625,"height":1}},{"text":"        compile(file_path, bin_path);","targetRectangle":{"y":279.13544607162476,"x":448.34743642807007,"width":22.20361328125,"height":1}},{"text":"        ref_out = exec_cmd(bin_path);","targetRectangle":{"y":281.13544607162476,"x":448.34743642807007,"width":22.20361328125,"height":1}},{"text":"        cout << \\\"Reference Output:\\\" << endl << ref_out << endl;","targetRectangle":{"y":282.13544607162476,"x":448.34743642807007,"width":37.80615234375,"height":1}},{"text":"    }","targetRectangle":{"y":284.13544607162476,"x":448.34743642807007,"width":3.00048828125,"height":1}},{"text":"    printBanner(\\\"Calculate Original Dependence Vectors\\\");","targetRectangle":{"y":287.13544607162476,"x":448.34743642807007,"width":34.20556640625,"height":1}},{"text":"    DependenceGraph orig_dep_graph;","targetRectangle":{"y":288.13544607162476,"x":448.34743642807007,"width":21.00341796875,"height":1}},{"text":"    orig_dep_graph.printDepSet(cout);","targetRectangle":{"y":289.13544607162476,"x":448.34743642807007,"width":22.20361328125,"height":1}},{"text":"   ","targetRectangle":{"y":290.13544607162476,"x":448.34743642807007,"width":1.80029296875,"height":1}},{"text":"    if (generate_output(ref_out, db->getMutationNumber())) {","targetRectangle":{"y":291.13544607162476,"x":448.34743642807007,"width":36.005859375,"height":1}},{"text":"        db->clearOldData();","targetRectangle":{"y":292.13544607162476,"x":448.34743642807007,"width":16.20263671875,"height":1}},{"text":"        db->addMutation(Database::trans_vec_t());","targetRectangle":{"y":293.13544607162476,"x":448.34743642807007,"width":29.40478515625,"height":1}},{"text":"    }","targetRectangle":{"y":294.13544607162476,"x":448.34743642807007,"width":3.00048828125,"height":1}},{"text":"    dep_set_t orig_dep_set = orig_dep_graph.getDepSet();","targetRectangle":{"y":296.13544607162476,"x":448.34743642807007,"width":33.60546875,"height":1}},{"text":"    SgBasicBlock *root = isSgBasicBlock(orig_dep_graph.getRoot());","targetRectangle":{"y":298.13544607162476,"x":448.34743642807007,"width":39.6064453125,"height":1}},{"text":"    if (root == NULL) {","targetRectangle":{"y":299.13544607162476,"x":448.34743642807007,"width":13.80224609375,"height":1}},{"text":"        cout << \\\"No proper SCoP is found in the input file.\\\" << endl;","targetRectangle":{"y":301.13544607162476,"x":448.34743642807007,"width":41.40673828125,"height":1}},{"text":"        if (body) {","targetRectangle":{"y":303.13544607162476,"x":448.34743642807007,"width":11.40185546875,"height":1}},{"text":"            cout << \\\"Only doing unrolling.\\\" << endl;","targetRectangle":{"y":305.13544607162476,"x":448.34743642807007,"width":31.205078125,"height":1}},{"text":"            Database::trans_vec_t trans_vec;","targetRectangle":{"y":307.13544607162476,"x":448.34743642807007,"width":26.404296875,"height":1}},{"text":"            unrollInnerLoops(trans_vec, body, ref_out);","targetRectangle":{"y":308.13544607162476,"x":448.34743642807007,"width":33.00537109375,"height":1}},{"text":"        }","targetRectangle":{"y":310.13544607162476,"x":448.34743642807007,"width":5.40087890625,"height":1}},{"text":"        db->finalize(true);","targetRectangle":{"y":312.13544607162476,"x":448.34743642807007,"width":16.20263671875,"height":1}},{"text":"        return 0;","targetRectangle":{"y":314.13544607162476,"x":448.34743642807007,"width":10.20166015625,"height":1}},{"text":"    }","targetRectangle":{"y":315.13544607162476,"x":448.34743642807007,"width":3.00048828125,"height":1}},{"text":"    \/*vector<set<int> > disjoint_sets = orig_dep_graph.getDisjointStatmentSets();","targetRectangle":{"y":317.13544607162476,"x":448.34743642807007,"width":48.60791015625,"height":1}},{"text":"    for (vector<set<int> >::iterator v_itr = disjoint_sets.begin(); v_itr != disjoint_sets.end(); ++v_itr) {","targetRectangle":{"y":318.13544607162476,"x":448.34743642807007,"width":64.810546875,"height":1}},{"text":"        for (set<int>::iterator s_itr = v_itr->begin(); s_itr != v_itr->end(); ++s_itr) {","targetRectangle":{"y":319.13544607162476,"x":448.34743642807007,"width":53.40869140625,"height":1}},{"text":"            cout << *s_itr << \\\" \\\";","targetRectangle":{"y":320.13544607162476,"x":448.34743642807007,"width":20.4033203125,"height":1}},{"text":"        }","targetRectangle":{"y":321.13544607162476,"x":448.34743642807007,"width":5.40087890625,"height":1}},{"text":"        cout << endl;","targetRectangle":{"y":322.13544607162476,"x":448.34743642807007,"width":12.60205078125,"height":1}},{"text":"    }*\/","targetRectangle":{"y":323.13544607162476,"x":448.34743642807007,"width":4.20068359375,"height":1}},{"text":"    \/\/NodePrinter np;","targetRectangle":{"y":325.13544607162476,"x":448.34743642807007,"width":12.60205078125,"height":1}},{"text":"    \/\/np.traverse(root);","targetRectangle":{"y":326.13544607162476,"x":448.34743642807007,"width":14.40234375,"height":1}},{"text":"    \/\/return 0;","targetRectangle":{"y":328.13544607162476,"x":448.34743642807007,"width":9.00146484375,"height":1}},{"text":"    \/\/return 0;","targetRectangle":{"y":330.13544607162476,"x":448.34743642807007,"width":9.00146484375,"height":1}},{"text":"    for (loop_info_vec_t::const_iterator citr = outer_loop_vec.begin(); citr != outer_loop_vec.end(); ++citr) {","targetRectangle":{"y":333.13544607162476,"x":448.34743642807007,"width":66.61083984375,"height":1}},{"text":"        OuterLoopInfo loop(*citr);","targetRectangle":{"y":335.13544607162476,"x":448.34743642807007,"width":20.4033203125,"height":1}},{"text":"        if (!SageInterface::isAncestor(root, loop.loop_)) {","targetRectangle":{"y":337.13544607162476,"x":448.34743642807007,"width":35.40576171875,"height":1}},{"text":"            continue;","targetRectangle":{"y":338.13544607162476,"x":448.34743642807007,"width":12.60205078125,"height":1}},{"text":"        }","targetRectangle":{"y":339.13544607162476,"x":448.34743642807007,"width":5.40087890625,"height":1}},{"text":"        Database::trans_vec_t trans_vec;","targetRectangle":{"y":341.13544607162476,"x":448.34743642807007,"width":24.00390625,"height":1}},{"text":"        int depth = loop.inner_loop_nest_depth_;","targetRectangle":{"y":342.13544607162476,"x":448.34743642807007,"width":28.8046875,"height":1}},{"text":"        unrollInnerLoops(trans_vec, root, ref_out);","targetRectangle":{"y":344.13544607162476,"x":448.34743642807007,"width":30.60498046875,"height":1}},{"text":"        if (!skip_interchange_tiling) {","targetRectangle":{"y":345.13544607162476,"x":448.34743642807007,"width":23.40380859375,"height":1}},{"text":"            unrollAndJam(trans_vec, root, depth, ref_out, orig_dep_graph);","targetRectangle":{"y":346.13544607162476,"x":448.34743642807007,"width":44.4072265625,"height":1}},{"text":"        }","targetRectangle":{"y":347.13544607162476,"x":448.34743642807007,"width":5.40087890625,"height":1}},{"text":"        distributeInnerLoops(trans_vec, root, ref_out, orig_dep_graph);","targetRectangle":{"y":348.13544607162476,"x":448.34743642807007,"width":42.60693359375,"height":1}},{"text":"        \/\/ Check if the loop nest is perfect. Skip interchange and tiling if the nest is not perfect.","targetRectangle":{"y":350.13544607162476,"x":448.34743642807007,"width":60.60986328125,"height":1}},{"text":"        bool perfect = true;","targetRectangle":{"y":351.13544607162476,"x":448.34743642807007,"width":16.802734375,"height":1}},{"text":"        vector<SgForStatement *> loop_nest = SageInterface::querySubTree<SgForStatement>(loop.loop_, V_SgForStatement);","targetRectangle":{"y":352.13544607162476,"x":448.34743642807007,"width":71.41162109375,"height":1}},{"text":"        for (vector<SgForStatement *>::iterator f_itr = loop_nest.begin(); f_itr != loop_nest.end(); ++f_itr) {","targetRectangle":{"y":353.13544607162476,"x":448.34743642807007,"width":66.61083984375,"height":1}},{"text":"            SgForStatement* cur_loop = *f_itr;","targetRectangle":{"y":354.13544607162476,"x":448.34743642807007,"width":27.6044921875,"height":1}},{"text":"            ","targetRectangle":{"y":355.13544607162476,"x":448.34743642807007,"width":7.201171875,"height":1}},{"text":"            SgBasicBlock *cur_body = isSgBasicBlock(SageInterface::getLoopBody(cur_loop));","targetRectangle":{"y":356.13544607162476,"x":448.34743642807007,"width":54.0087890625,"height":1}},{"text":"            if (cur_body->get_numberOfTraversalSuccessors() != 1) {","targetRectangle":{"y":357.13544607162476,"x":448.34743642807007,"width":40.20654296875,"height":1}},{"text":"                if (SageInterface::querySubTree<SgForStatement>(cur_body, V_SgForStatement).size() == 0) {","targetRectangle":{"y":358.13544607162476,"x":448.34743642807007,"width":63.6103515625,"height":1}},{"text":"                    continue;","targetRectangle":{"y":359.13544607162476,"x":448.34743642807007,"width":17.40283203125,"height":1}},{"text":"                }","targetRectangle":{"y":360.13544607162476,"x":448.34743642807007,"width":10.20166015625,"height":1}},{"text":"                perfect = false;","targetRectangle":{"y":361.13544607162476,"x":448.34743642807007,"width":19.203125,"height":1}},{"text":"                break;","targetRectangle":{"y":362.13544607162476,"x":448.34743642807007,"width":13.2021484375,"height":1}},{"text":"            }","targetRectangle":{"y":363.13544607162476,"x":448.34743642807007,"width":7.80126953125,"height":1}},{"text":"        }","targetRectangle":{"y":364.13544607162476,"x":448.34743642807007,"width":5.40087890625,"height":1}},{"text":"        if (!perfect) {","targetRectangle":{"y":365.13544607162476,"x":448.34743642807007,"width":13.80224609375,"height":1}},{"text":"            cout << \\\"Loop nest is imperfect. Skip Interchange and Tiling.\\\" << endl;","targetRectangle":{"y":366.13544607162476,"x":448.34743642807007,"width":49.80810546875,"height":1}},{"text":"            continue;","targetRectangle":{"y":367.13544607162476,"x":448.34743642807007,"width":12.60205078125,"height":1}},{"text":"        }","targetRectangle":{"y":368.13544607162476,"x":448.34743642807007,"width":5.40087890625,"height":1}},{"text":"        if (!skip_interchange_tiling) {","targetRectangle":{"y":370.13544607162476,"x":448.34743642807007,"width":23.40380859375,"height":1}},{"text":"            tileLoops(trans_vec, root, loop.loop_, depth, ref_out, orig_dep_graph);","targetRectangle":{"y":371.13544607162476,"x":448.34743642807007,"width":49.80810546875,"height":1}},{"text":"        }","targetRectangle":{"y":372.13544607162476,"x":448.34743642807007,"width":5.40087890625,"height":1}},{"text":"        \/\/ If depth is 1, skip interchange.","targetRectangle":{"y":374.13544607162476,"x":448.34743642807007,"width":25.80419921875,"height":1}},{"text":"        if (depth == 1 || skip_interchange_tiling) {","targetRectangle":{"y":375.13544607162476,"x":448.34743642807007,"width":31.205078125,"height":1}},{"text":"            continue;","targetRectangle":{"y":376.13544607162476,"x":448.34743642807007,"width":12.60205078125,"height":1}},{"text":"        }","targetRectangle":{"y":377.13544607162476,"x":448.34743642807007,"width":5.40087890625,"height":1}},{"text":"        int num_order = 1;","targetRectangle":{"y":379.13544607162476,"x":448.34743642807007,"width":15.6025390625,"height":1}},{"text":"        for (int i = 2; i <= depth; ++i) {","targetRectangle":{"y":380.13544607162476,"x":448.34743642807007,"width":25.2041015625,"height":1}},{"text":"            num_order *= i;","targetRectangle":{"y":381.13544607162476,"x":448.34743642807007,"width":16.20263671875,"height":1}},{"text":"        }","targetRectangle":{"y":382.13544607162476,"x":448.34743642807007,"width":5.40087890625,"height":1}},{"text":"        for (int i = 1; i < num_order; ++i) {","targetRectangle":{"y":384.13544607162476,"x":448.34743642807007,"width":27.00439453125,"height":1}},{"text":"            \/\/! A helper function to return a permutation order for n elements based on a lexicographical order number.","targetRectangle":{"y":386.13544607162476,"x":448.34743642807007,"width":71.41162109375,"height":1}},{"text":"            \/\/! See also, Combinatorics::permute(), which is faster but does not use strict lexicographic ordering.","targetRectangle":{"y":387.13544607162476,"x":448.34743642807007,"width":69.01123046875,"height":1}},{"text":"            size_t k = i;","targetRectangle":{"y":388.13544607162476,"x":448.34743642807007,"width":15.00244140625,"height":1}},{"text":"            vector<size_t> s(depth);","targetRectangle":{"y":389.13544607162476,"x":448.34743642807007,"width":21.603515625,"height":1}},{"text":"            \/\/ initialize the permutation vector","targetRectangle":{"y":390.13544607162476,"x":448.34743642807007,"width":28.8046875,"height":1}},{"text":"            for (size_t j = 0; j < depth; ++j) {","targetRectangle":{"y":391.13544607162476,"x":448.34743642807007,"width":28.8046875,"height":1}},{"text":"                s[j]=j;","targetRectangle":{"y":392.13544607162476,"x":448.34743642807007,"width":13.80224609375,"height":1}},{"text":"            }","targetRectangle":{"y":393.13544607162476,"x":448.34743642807007,"width":7.80126953125,"height":1}},{"text":"            \/\/compute (n- 1)!","targetRectangle":{"y":395.13544607162476,"x":448.34743642807007,"width":17.40283203125,"height":1}},{"text":"            size_t factorial = 1;","targetRectangle":{"y":396.13544607162476,"x":448.34743642807007,"width":19.80322265625,"height":1}},{"text":"            for (int j = 2; j <= depth - 1; ++j) {","targetRectangle":{"y":397.13544607162476,"x":448.34743642807007,"width":30.0048828125,"height":1}},{"text":"                factorial *= j;","targetRectangle":{"y":398.13544607162476,"x":448.34743642807007,"width":18.60302734375,"height":1}},{"text":"            }","targetRectangle":{"y":399.13544607162476,"x":448.34743642807007,"width":7.80126953125,"height":1}},{"text":"            \/\/ Algorithm:","targetRectangle":{"y":400.13544607162476,"x":448.34743642807007,"width":15.00244140625,"height":1}},{"text":"            \/\/check each element of the array, excluding the right most one.","targetRectangle":{"y":401.13544607162476,"x":448.34743642807007,"width":45.607421875,"height":1}},{"text":"            \/\/the goal is to find the right element for each s[j] from 0 to n-2","targetRectangle":{"y":402.13544607162476,"x":448.34743642807007,"width":47.40771484375,"height":1}},{"text":"            \/\/ method: each position is associated a factorial number","targetRectangle":{"y":403.13544607162476,"x":448.34743642807007,"width":41.40673828125,"height":1}},{"text":"            \/\/    s[0] -> (n-1)!","targetRectangle":{"y":404.13544607162476,"x":448.34743642807007,"width":19.203125,"height":1}},{"text":"            \/\/    s[1] -> (n-2)! ...","targetRectangle":{"y":405.13544607162476,"x":448.34743642807007,"width":21.603515625,"height":1}},{"text":"            \/\/ the input number k is divided by the factorial at each position (6, 3, 2, 1 for size =4)","targetRectangle":{"y":406.13544607162476,"x":448.34743642807007,"width":61.81005859375,"height":1}},{"text":"            \/\/   so only big enough k can have non-zero value after division","targetRectangle":{"y":407.13544607162476,"x":448.34743642807007,"width":45.607421875,"height":1}},{"text":"            \/\/   0 value means no change to the position for the current iteration","targetRectangle":{"y":408.13544607162476,"x":448.34743642807007,"width":49.2080078125,"height":1}},{"text":"            \/\/ The non-zero value is further modular by the number of the right hand elements of the current element.","targetRectangle":{"y":409.13544607162476,"x":448.34743642807007,"width":70.21142578125,"height":1}},{"text":"            \/\/     (mode on 4, 3, 2 to get offset 1-2-3, 1-2, 1 from the current position 0, 1, 2)","targetRectangle":{"y":410.13544607162476,"x":448.34743642807007,"width":58.8095703125,"height":1}},{"text":"            \/\/  choose one of them to be moved to the current position,","targetRectangle":{"y":411.13544607162476,"x":448.34743642807007,"width":42.60693359375,"height":1}},{"text":"            \/\/  shift elements between the current and the moved element to the right direction for one position","targetRectangle":{"y":412.13544607162476,"x":448.34743642807007,"width":67.2109375,"height":1}},{"text":"            for (size_t j = 0; j < depth - 1; ++j) {","targetRectangle":{"y":413.13544607162476,"x":448.34743642807007,"width":31.205078125,"height":1}},{"text":"                \/\/calculates the next cell from the cells left","targetRectangle":{"y":414.13544607162476,"x":448.34743642807007,"width":37.2060546875,"height":1}},{"text":"                \/\/(the cells in the range [j, s.length - 1])","targetRectangle":{"y":415.13544607162476,"x":448.34743642807007,"width":36.005859375,"height":1}},{"text":"                int tempj = (k \/ factorial) % (depth - j);","targetRectangle":{"y":416.13544607162476,"x":448.34743642807007,"width":34.8056640625,"height":1}},{"text":"                \/\/Temporarily saves the value of the cell needed","targetRectangle":{"y":417.13544607162476,"x":448.34743642807007,"width":38.40625,"height":1}},{"text":"                \/\/ to add to the permutation this time","targetRectangle":{"y":418.13544607162476,"x":448.34743642807007,"width":32.4052734375,"height":1}},{"text":"                int temps = s[j + tempj];","targetRectangle":{"y":419.13544607162476,"x":448.34743642807007,"width":24.60400390625,"height":1}},{"text":"                \/\/shift all elements to \\\"cover\\\" the \\\"missing\\\" cell","targetRectangle":{"y":420.13544607162476,"x":448.34743642807007,"width":39.6064453125,"height":1}},{"text":"                \/\/shift them to the right","targetRectangle":{"y":421.13544607162476,"x":448.34743642807007,"width":24.60400390625,"height":1}},{"text":"                for (size_t l = j + tempj; l > j; --l)","targetRectangle":{"y":422.13544607162476,"x":448.34743642807007,"width":32.4052734375,"height":1}},{"text":"                {","targetRectangle":{"y":423.13544607162476,"x":448.34743642807007,"width":10.20166015625,"height":1}},{"text":"                  s[l] = s[l - 1]; \/\/shift the chain right","targetRectangle":{"y":424.13544607162476,"x":448.34743642807007,"width":34.8056640625,"height":1}},{"text":"                }","targetRectangle":{"y":425.13544607162476,"x":448.34743642807007,"width":10.20166015625,"height":1}},{"text":"                \/\/ put the chosen cell in the correct spot","targetRectangle":{"y":426.13544607162476,"x":448.34743642807007,"width":34.8056640625,"height":1}},{"text":"                s[j] = temps;","targetRectangle":{"y":427.13544607162476,"x":448.34743642807007,"width":17.40283203125,"height":1}},{"text":"                \/\/ updates the factorial","targetRectangle":{"y":428.13544607162476,"x":448.34743642807007,"width":24.00390625,"height":1}},{"text":"                factorial = factorial \/ (depth - (j + 1));","targetRectangle":{"y":429.13544607162476,"x":448.34743642807007,"width":34.8056640625,"height":1}},{"text":"            }","targetRectangle":{"y":430.13544607162476,"x":448.34743642807007,"width":7.80126953125,"height":1}},{"text":"            bool legal = orig_dep_graph.isPermutationLegal(s);","targetRectangle":{"y":432.13544607162476,"x":448.34743642807007,"width":37.2060546875,"height":1}},{"text":"            if (!legal) {","targetRectangle":{"y":433.13544607162476,"x":448.34743642807007,"width":15.00244140625,"height":1}},{"text":"                cout << \\\"Permutation [ \\\";","targetRectangle":{"y":435.13544607162476,"x":448.34743642807007,"width":24.60400390625,"height":1}},{"text":"                for (int i = 0; i < s.size(); ++i) {","targetRectangle":{"y":436.13544607162476,"x":448.34743642807007,"width":31.205078125,"height":1}},{"text":"                    cout << s[i] << \\\" \\\";","targetRectangle":{"y":437.13544607162476,"x":448.34743642807007,"width":24.00390625,"height":1}},{"text":"                }","targetRectangle":{"y":438.13544607162476,"x":448.34743642807007,"width":10.20166015625,"height":1}},{"text":"                cout << \\\"] is illegal\\\" << endl;","targetRectangle":{"y":439.13544607162476,"x":448.34743642807007,"width":28.20458984375,"height":1}},{"text":"                continue;","targetRectangle":{"y":440.13544607162476,"x":448.34743642807007,"width":15.00244140625,"height":1}},{"text":"            }","targetRectangle":{"y":441.13544607162476,"x":448.34743642807007,"width":7.80126953125,"height":1}},{"text":"            SgForStatement *new_loop = isSgForStatement(SageInterface::copyStatement(loop.loop_));","targetRectangle":{"y":444.13544607162476,"x":448.34743642807007,"width":58.8095703125,"height":1}},{"text":"            SageInterface::replaceStatement(loop.loop_, new_loop);","targetRectangle":{"y":445.13544607162476,"x":448.34743642807007,"width":39.6064453125,"height":1}},{"text":"            if (SageInterface::loopInterchange(new_loop, depth, i)) {","targetRectangle":{"y":447.13544607162476,"x":448.34743642807007,"width":41.40673828125,"height":1}},{"text":"                cout << \\\"Interchanged a loop nest of depth \\\" << depth << \\\" with permutation [ \\\";","targetRectangle":{"y":449.13544607162476,"x":448.34743642807007,"width":57.609375,"height":1}},{"text":"                for (int j = 0; j < s.size(); ++j) {","targetRectangle":{"y":450.13544607162476,"x":448.34743642807007,"width":31.205078125,"height":1}},{"text":"                    cout << s[j] << \\\" \\\";","targetRectangle":{"y":451.13544607162476,"x":448.34743642807007,"width":24.00390625,"height":1}},{"text":"                }","targetRectangle":{"y":452.13544607162476,"x":448.34743642807007,"width":10.20166015625,"height":1}},{"text":"                cout << \\\"]\\\" << endl;","targetRectangle":{"y":453.13544607162476,"x":448.34743642807007,"width":21.603515625,"height":1}},{"text":"                if (generate_output(ref_out, db->getMutationNumber())) {","targetRectangle":{"y":455.13544607162476,"x":448.34743642807007,"width":43.20703125,"height":1}},{"text":"                    stringstream ss;","targetRectangle":{"y":457.13544607162476,"x":448.34743642807007,"width":21.603515625,"height":1}},{"text":"                    ss << \\\"depth=\\\" << depth << \\\",order=\\\" << i;","targetRectangle":{"y":458.13544607162476,"x":448.34743642807007,"width":37.2060546875,"height":1}},{"text":"                    Database::trans_vec_t tmp_vec = trans_vec;","targetRectangle":{"y":460.13544607162476,"x":448.34743642807007,"width":37.2060546875,"height":1}},{"text":"                    Database::Transformation trans(\\\"interchange\\\", ss.str());","targetRectangle":{"y":461.13544607162476,"x":448.34743642807007,"width":45.607421875,"height":1}},{"text":"                    tmp_vec.push_back(trans);","targetRectangle":{"y":463.13544607162476,"x":448.34743642807007,"width":27.00439453125,"height":1}},{"text":"                    db->addMutation(tmp_vec);","targetRectangle":{"y":465.13544607162476,"x":448.34743642807007,"width":27.00439453125,"height":1}},{"text":"                    DependenceGraph permu_dep_graph;","targetRectangle":{"y":467.13544607162476,"x":448.34743642807007,"width":31.205078125,"height":1}},{"text":"                    unrollInnerLoops(tmp_vec, root, ref_out);","targetRectangle":{"y":469.13544607162476,"x":448.34743642807007,"width":36.60595703125,"height":1}},{"text":"                    unrollAndJam(tmp_vec, root, depth, ref_out, permu_dep_graph);","targetRectangle":{"y":471.13544607162476,"x":448.34743642807007,"width":48.60791015625,"height":1}},{"text":"                    distributeInnerLoops(tmp_vec, root, ref_out, permu_dep_graph);","targetRectangle":{"y":473.13544607162476,"x":448.34743642807007,"width":49.2080078125,"height":1}},{"text":"                    tileLoops(tmp_vec, root, new_loop, depth, ref_out, permu_dep_graph);","targetRectangle":{"y":475.13544607162476,"x":448.34743642807007,"width":52.80859375,"height":1}},{"text":"                }","targetRectangle":{"y":476.13544607162476,"x":448.34743642807007,"width":10.20166015625,"height":1}},{"text":"            }","targetRectangle":{"y":477.13544607162476,"x":448.34743642807007,"width":7.80126953125,"height":1}},{"text":"            SageInterface::replaceStatement(new_loop, loop.loop_);","targetRectangle":{"y":479.13544607162476,"x":448.34743642807007,"width":39.6064453125,"height":1}},{"text":"            SageInterface::deepDelete(new_loop);","targetRectangle":{"y":480.13544607162476,"x":448.34743642807007,"width":28.8046875,"height":1}},{"text":"        }","targetRectangle":{"y":482.13544607162476,"x":448.34743642807007,"width":5.40087890625,"height":1}},{"text":"    }","targetRectangle":{"y":484.13544607162476,"x":448.34743642807007,"width":3.00048828125,"height":1}},{"text":"    db->finalize(true);","targetRectangle":{"y":486.13544607162476,"x":448.34743642807007,"width":13.80224609375,"height":1}},{"text":"    delete project;","targetRectangle":{"y":488.13544607162476,"x":448.34743642807007,"width":11.40185546875,"height":1}},{"text":"    return 0;","targetRectangle":{"y":490.13544607162476,"x":448.34743642807007,"width":7.80126953125,"height":1}},{"text":"}","targetRectangle":{"y":491.13544607162476,"x":448.34743642807007,"width":0.60009765625,"height":1}},{"text":"Optimization of Arbitrary Loop Nests","targetRectangle":{"y":30.599999904632568,"x":33.599999904632568,"width":428.23486328125,"height":29}},{"text":"CodeReg scop {","targetRectangle":{"y":90.635438442230225,"x":27.930665493011475,"width":84.013671875,"height":12}},{"text":"  perfect = BuiltIn.IsPerfectLoopNest();","targetRectangle":{"y":102.63543844223022,"x":27.930665493011475,"width":240.0390625,"height":12}},{"text":"  depth = BuiltIn.LoopNestDepth();","targetRectangle":{"y":114.63543844223022,"x":27.930665493011475,"width":204.033203125,"height":12}},{"text":"  if (RoseLocus.IsDepAvailable()) {","targetRectangle":{"y":126.63543844223022,"x":27.930665493011475,"width":210.0341796875,"height":12}},{"text":"    if (perfect && depth > 1) {","targetRectangle":{"y":138.63543844223022,"x":27.930665493011475,"width":186.0302734375,"height":12}},{"text":"      permorder = permutation(seq(0,depth));","targetRectangle":{"y":150.63543844223022,"x":27.930665493011475,"width":264.04296875,"height":12}},{"text":"      RoseLocus.Interchange(order=permorder);","targetRectangle":{"y":162.63543844223022,"x":27.930665493011475,"width":270.0439453125,"height":12}},{"text":"    }","targetRectangle":{"y":174.63543844223022,"x":27.930665493011475,"width":30.0048828125,"height":12}},{"text":"    {","targetRectangle":{"y":186.63543844223022,"x":27.930665493011475,"width":30.0048828125,"height":12}},{"text":"      if (perfect) {","targetRectangle":{"y":198.63543844223022,"x":27.930665493011475,"width":120.01953125,"height":12}},{"text":"        indexT1 = integer(1..depth);","targetRectangle":{"y":210.63543844223022,"x":27.930665493011475,"width":216.03515625,"height":12}},{"text":"        T1fac = poweroftwo(2..32);","targetRectangle":{"y":222.63543844223022,"x":27.930665493011475,"width":204.033203125,"height":12}},{"text":"        RoseLocus.Tiling(loop=indexT1, factor=T1fac);","targetRectangle":{"y":234.63543844223022,"x":27.930665493011475,"width":318.0517578125,"height":12}},{"text":"      }","targetRectangle":{"y":246.63543844223022,"x":27.930665493011475,"width":42.0068359375,"height":12}},{"text":"    } OR {","targetRectangle":{"y":258.63543844223022,"x":27.930665493011475,"width":60.009765625,"height":12}},{"text":"      if (depth > 1) {","targetRectangle":{"y":270.63543844223022,"x":27.930665493011475,"width":132.021484375,"height":12}},{"text":"        indexUAJ = integer(1..depth-1);","targetRectangle":{"y":282.63543844223022,"x":27.930665493011475,"width":234.0380859375,"height":12}},{"text":"        UAJfac = poweroftwo(2..4);","targetRectangle":{"y":294.63543844223022,"x":27.930665493011475,"width":204.033203125,"height":12}},{"text":"        RoseLocus.UnrollAndJam(loop=indexUAJ, ","targetRectangle":{"y":306.63543844223022,"x":27.930665493011475,"width":276.044921875,"height":12}},{"text":"                               factor=UAJfac);","targetRectangle":{"y":318.63543844223022,"x":27.930665493011475,"width":276.044921875,"height":12}},{"text":"      }","targetRectangle":{"y":330.63543844223022,"x":27.930665493011475,"width":42.0068359375,"height":12}},{"text":"    } OR {","targetRectangle":{"y":342.63543844223022,"x":27.930665493011475,"width":60.009765625,"height":12}},{"text":"      None; # No tiling, interchange, or unroll and jam.","targetRectangle":{"y":354.63543844223022,"x":27.930665493011475,"width":336.0546875,"height":12}},{"text":"    }","targetRectangle":{"y":366.63543844223022,"x":27.930665493011475,"width":30.0048828125,"height":12}},{"text":"    innerloops = BuiltIn.ListInnerLoops();","targetRectangle":{"y":378.63543844223022,"x":27.930665493011475,"width":252.041015625,"height":12}},{"text":"    *RoseLocus.Distribute(loop=innerloops);","targetRectangle":{"y":390.63543844223022,"x":27.930665493011475,"width":258.0419921875,"height":12}},{"text":"  }","targetRectangle":{"y":402.63543844223022,"x":27.930665493011475,"width":18.0029296875,"height":12}},{"text":"  innerloops = BuiltIn.ListInnerLoops();","targetRectangle":{"y":414.63543844223022,"x":27.930665493011475,"width":240.0390625,"height":12}},{"text":"  RoseLocus.Unroll(loop=innerloops, ","targetRectangle":{"y":426.63543844223022,"x":27.930665493011475,"width":216.03515625,"height":12}},{"text":"                   factor=poweroftwo(2..8));","targetRectangle":{"y":438.63543844223022,"x":27.930665493011475,"width":264.04296875,"height":12}},{"text":"}","targetRectangle":{"y":450.63543844223022,"x":27.930665493011475,"width":6.0009765625,"height":12}}],"baseLayer":{"animations":[],"initialState":{"affineTransform":[1,0,0,1,0,0],"masksToBounds":false,"rotation":0,"scale":1,"position":{"pointX":360,"pointY":270},"width":720,"sublayerTransform":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],"contentsRect":{"y":0,"x":0,"width":1,"height":1},"opacity":1,"edgeAntialiasingMask":251658240,"height":540,"hidden":false,"anchorPoint":{"pointX":0.5,"pointY":0.5}},"objectID":"0","layers":[{"animations":[],"initialState":{"affineTransform":[1,0,0,1,0,0],"masksToBounds":false,"rotation":0,"scale":1,"position":{"pointX":360,"pointY":270},"width":720,"sublayerTransform":[1,0,0,0,0,1,0,0,0,0,1,-0.00070015824933551967,0,0,0,1],"contentsRect":{"y":0,"x":0,"width":1,"height":1},"opacity":1,"edgeAntialiasingMask":251658240,"height":540,"hidden":false,"anchorPoint":{"pointX":0.5,"pointY":0.5}},"layers":[{"animations":[],"layers":[],"texturedRectangle":{"isBackgroundTexture":false,"singleTextureOpacity":1,"textureType":0,"textBaseline":0,"textXHeight":0,"isVerticalText":false},"initialState":{"affineTransform":[1,0,0,1,0,0],"masksToBounds":false,"rotation":0,"scale":1,"position":{"pointX":360,"pointY":270},"width":720,"sublayerTransform":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],"contentsRect":{"y":0,"x":0,"width":1,"height":1},"opacity":1,"edgeAntialiasingMask":0,"height":540,"hidden":false,"anchorPoint":{"pointX":0.5,"pointY":0.5}},"texture":"73D4AB454566C54BE44EF1C16C1A7531"}]}]}}]}} )